{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "das-at-dfac-df"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ImportPFBEToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Import Provide Feedback Employer Cosmos DB",
				"activities": [
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ImportEmployerFeedback",
						"description": "Import Employer Feedback Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": [],
								"pageSize": 100,
								"detectDatetime": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Stg].[PFBE_EmployerFeedback]') AND type in (N'U'))\nDELETE FROM [Stg].[PFBE_EmployerFeedback]\n\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportProvideEmployerFeedbackToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "FeedbackName"
										}
									},
									{
										"source": {
											"path": "[['value']"
										},
										"sink": {
											"name": "FeedbackValue"
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "$['ukprn']"
										},
										"sink": {
											"name": "Ukprn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['accountId']"
										},
										"sink": {
											"name": "AccountId"
										}
									},
									{
										"source": {
											"path": "$['dateTimeCompleted']"
										},
										"sink": {
											"name": "DatetimeCompleted"
										}
									},
									{
										"source": {
											"path": "$['providerRating']"
										},
										"sink": {
											"name": "ProviderRating"
										}
									}
								],
								"collectionReference": "$['providerAttributes']"
							}
						},
						"inputs": [
							{
								"referenceName": "SrcPFBECosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "employer-feedback"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "PFBE_EmployerFeedback",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogSuccessfulExecution",
						"description": "Log Successful Task",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportEmployerFeedback",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportProvideEmployerFeedbackToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ImportPFBEEmployerFeedbackStgToLive",
						"description": "Import Employer Feedback  Staging to LIVE",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogSuccessfulExecution",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ImportEmployerFeedbackStgToLive]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogEmployerFeedbackImportErrorDetails",
						"description": "Log Employer Feedback Import Error Details ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportEmployerFeedback",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportEmployerFeedback').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportProvideEmployerFeedbackToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					},
					"RunId": {
						"type": "string",
						"defaultValue": "150"
					}
				},
				"variables": {
					"RunId": {
						"type": "String",
						"defaultValue": "\"1\""
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcPFBECosmos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcPFBECosmos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Provide Feedback Employer",
				"linkedServiceName": {
					"referenceName": "pfbe_cdbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"CollectionName": {
						"type": "string",
						"defaultValue": "employer-feedback"
					}
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"ukprn": {
							"type": "integer"
						},
						"accountId": {
							"type": "integer"
						},
						"dateTimeCompleted": {
							"type": "string"
						},
						"providerAttributes": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"value": {
										"type": "integer"
									}
								}
							}
						},
						"providerRating": {
							"type": "string"
						}
					}
				},
				"typeProperties": {
					"collectionName": {
						"value": "@dataset().CollectionName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pfbe_cdbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pfbe_cdbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "pfbe-cdbconnectionstring"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-EmployerFeedback')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trigger Employer Feedback",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ImportPFBEToDataMart",
							"type": "PipelineReference"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2021-04-06T11:12:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								23
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ImportPFBEToDataMart')]"
			]
		}
	]
}