{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "das-at-dfac-df"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ImportAssessorToDM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Import Assessor EPAO Data to Mart",
				"activities": [
					{
						"name": "GetAssessorQueryList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfQueryBasedImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name,SourceQuery as SourceQuery, StagingTableName as StagingTableName FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='Assessor' and IsEnabled=1 and IsQueryBasedImport=1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachQuery",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetAssessorQueryList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetAssessorQueryList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetImportQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVariableAQK2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @SQLCode nvarchar(max)\nDECLARE @MtdSourceQuery nvarchar(max)\n\nSELECT @MtdSourceQuery='@{item().SourceQuery}'\n-- REPLACE( REPLACE('@{item().SourceQuery}','[',''),']','')\n\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\n\n\nDeclare @SourceQuery Varchar(max)\n\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='Assessor'\n    AND StagingTableName='@{item().StagingTableName}'\n        ) SourceConfigInDM\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('AQK1')}'),'K2','0x'+'@{variables('AQK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2)+CASE WHEN len(Replace(Replace(ConfigList,'[',''),']',''))>4 then SUBSTRING(ConfigList,len(ConfigList)/2,4) else SUBSTRING(ConfigList,len(ConfigList)/2,2) end\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='Assessor'\n    AND StagingTableName='@{item().StagingTableName}'\n      ) SourceConfigInDM\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n \n\nSET @SourceQuery='select ' + @collist + ' from ( '+@MtdSourceQuery+' ) a'; \n\nSELECT @SourceQuery SourceQuery",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "CopyApplyQueryBasedTablesToStagingArea",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GetImportQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@{activity('GetImportQuery').output.firstRow.SourceQuery}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'@{item().StagingTableName}' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[@{item().StagingTableName}]",
												"type": "Expression"
											},
											"maxConcurrentConnections": {
												"value": "@pipeline().parameters.MaxConcurrentConnections",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.DIU",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SrcAssessor",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "@{item().StagingTableName}",
												"SchemaName": "Stg"
											}
										}
									]
								},
								{
									"name": "LogErrorQB",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyApplyQueryBasedTablesToStagingArea",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyApplyQueryBasedTablesToStagingArea').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{pipeline().parameters.RunId}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportApplyQueryBasedToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "GenerateAQK1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @k1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GenerateAQK2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GenerateAQK1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVariableAQK1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GenerateAQK2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "AQK1",
										"value": {
											"value": "@{activity('GenerateAQK1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVariableAQK2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVariableAQK1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "AQK2",
										"value": {
											"value": "@{activity('GenerateAQK2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PresentationLayerFullRefreshQB",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyApplyQueryBasedTablesToStagingArea",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('AQK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('AQK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "AsData_PL.@{item().StagingTableName}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{pipeline().parameters.RunId}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "Assessor",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.@{item().StagingTableName}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "LogStartOfQueryBasedImport",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{pipeline().parameters.RunId}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportAssessorQueryBasedToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecutionOfQueryBasedImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachQuery",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportApplyQueryBasedToDM'\n     AND RunId=@{pipeline().parameters.RunId}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{pipeline().parameters.RunId}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"AK1": {
						"type": "String"
					},
					"AK2": {
						"type": "String"
					},
					"AQK1": {
						"type": "String"
					},
					"AQK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcAssessor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master-ImportAccUsersComtFinResvToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportUsersToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportUsersToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportAccountsToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportUsersToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAccountsToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "CompleteLogging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "BuildModelledPL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ExecuteImportComtToDM",
						"description": "Execute Import Commitment data to DM ",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportAccountsToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportCommitmentToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportFinToDM",
						"description": "Execute Import Finance data to DM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportComtToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFinanceToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportReservationToDM",
						"description": "Import Reservation to DM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportFinToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportReservationToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "BuildModelledPL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteImportAssessorToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.04:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Build_Modelled_PL]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@{activity('GetRunId').output.firstRow.RunId}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportRedundancyToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportReservationToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAppRedundancyToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportCRSDeliveryToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportRedundancyToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFAT2CRSDeliveryToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportCRSToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportCRSDeliveryToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFAT2CRSToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportApplyToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportCRSToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportApplyToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportAssessorToDM",
						"description": "Execute Assessor EPAO",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportApplyToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAssessorToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ImportAssessorToDM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcAssessor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Source Assessor",
				"linkedServiceName": {
					"referenceName": "ass_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "uniqueidentifier"
					},
					{
						"name": "CertificateData",
						"type": "nvarchar"
					},
					{
						"name": "ToBePrinted",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "CreatedAt",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "CreatedBy",
						"type": "nvarchar"
					},
					{
						"name": "DeletedAt",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DeletedBy",
						"type": "nvarchar"
					},
					{
						"name": "CertificateReference",
						"type": "nvarchar"
					},
					{
						"name": "OrganisationId",
						"type": "uniqueidentifier"
					},
					{
						"name": "BatchNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "UpdatedAt",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "UpdatedBy",
						"type": "nvarchar"
					},
					{
						"name": "Uln",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "StandardCode",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProviderUkPrn",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CertificateReferenceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LearnRefNumber",
						"type": "nvarchar"
					},
					{
						"name": "CreateDay",
						"type": "date"
					},
					{
						"name": "IsPrivatelyFunded",
						"type": "bit"
					},
					{
						"name": "PrivatelyFundedStatus",
						"type": "nvarchar"
					},
					{
						"name": "StandardUId",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Certificates"
				}
			},
			"dependsOn": []
		}
	]
}