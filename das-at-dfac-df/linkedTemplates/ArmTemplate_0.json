{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "das-at-dfac-df"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://das-at-dfac-kv.vault.azure.net/"
		},
		"avmsplus_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "avmsplus-dbconnectionstring"
		},
		"datamgmt_staging_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "datamgmt-staging-dbconnectionstring"
		},
		"faa_cdbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "faa-cdbconnectionstring"
		},
		"faa_cdbconnectionstring_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "findapprenticeship"
		},
		"rcrt_cdbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "rcrt-cdbconnectionstring"
		},
		"rcrt_cdbconnectionstring_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "recruit"
		},
		"Trigger-BuildDataMart_properties_Master-ImportVacanciesToDataMart_parameters_RunId": {
			"type": "string",
			"defaultValue": "\"1\""
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureIntegrationRunTime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/avmsplus_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('avmsplus_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datamgmt_staging_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('datamgmt_staging_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/faa_cdbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('faa_cdbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					},
					"database": "[parameters('faa_cdbconnectionstring_properties_typeProperties_database')]"
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rcrt_cdbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('rcrt_cdbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					},
					"database": "[parameters('rcrt_cdbconnectionstring_properties_typeProperties_database')]"
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestDataMart')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datamgmt_staging_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Users"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "Stg"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SourseSK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BinaryId",
						"type": "varchar"
					},
					{
						"name": "TypeCode",
						"type": "varchar"
					},
					{
						"name": "IdamUserId",
						"type": "varchar"
					},
					{
						"name": "UserType",
						"type": "varchar"
					},
					{
						"name": "UserName",
						"type": "varchar"
					},
					{
						"name": "UserEmail",
						"type": "varchar"
					},
					{
						"name": "UserCreatedTimeStamp",
						"type": "varchar"
					},
					{
						"name": "LastSignedInTimeStamp",
						"type": "varchar"
					},
					{
						"name": "EmployerAccountId",
						"type": "varchar"
					},
					{
						"name": "Ukprn",
						"type": "varchar"
					},
					{
						"name": "RunId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "AsDm_CreatedDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "AsDm_UpdatedDate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcAvmsPlus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "avmsplus_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Vacancy"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SrcTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/avmsplus_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcFAACosmos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "faa_cdbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"CollectionName": {
						"type": "string",
						"defaultValue": "Candidate"
					}
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"schema": [],
				"typeProperties": {
					"collection": {
						"value": "@dataset().CollectionName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/faa_cdbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcRAACosmos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rcrt_cdbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"CollectionName": {
						"type": "string",
						"defaultValue": "Users"
					}
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"schema": [],
				"typeProperties": {
					"collection": {
						"value": "@dataset().CollectionName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rcrt_cdbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportAvmsCandidateToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "DELETE FROM Stg.Avms_CandidateDetails\n\nSELECT ShortCode\n  FROM Stg.CandidateConfig\nWHERE SourceDb='RAAv1'\n    AND Category='Ethnicity'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ImportCandidateToDataMart",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GenerateCopyActvity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "CAID",
													"value": {
														"value": "@activity('GenerateCopyActvity').output.firstRow.CAID\n",
														"type": "Expression"
													}
												},
												{
													"name": "RunID",
													"value": {
														"value": "@pipeline().parameters.RunId",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "Select CandidateId\nFrom dbo.Candidate\nWhere EthnicOrigin=@{item().ShortCode}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "CandidateId",
														"type": "Int32"
													},
													"sink": {
														"name": "CandidateId",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CAID"
													},
													"sink": {
														"name": "EID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RunID"
													},
													"sink": {
														"name": "RunId",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "SrcAvmsPlus",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Candidate",
												"SchemaName": "dbo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Avms_CandidateDetails",
												"SchemaName": "Stg"
											}
										}
									]
								},
								{
									"name": "GenerateCopyActvity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @CAID BIGINT\n\nEXECUTE @CAID= [dbo].[GenerateCopyActivityId] @{pipeline().parameters.RunId}, 'RAAv1','Eth'\n\nSELECT @CAID as CAID",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ImportCandidateToDataMart",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('ImportCandidateToDataMart').output.Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{pipeline().parameters.RunId}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportAVMSCandidateEthToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GenerateConfig",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateConfig]",
							"storedProcedureParameters": {
								"Category": {
									"value": "Ethnicity",
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@pipeline().parameters.RunId",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SourceDb": {
									"value": "RAAv1",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{pipeline().parameters.RunId}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportAVMSCandidateEthToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportAVMSCandidateEthToDM'\n     AND RunId=@{pipeline().parameters.RunId}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{pipeline().parameters.RunId}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/datasets/SrcAvmsPlus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportAvmsToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRAAv1TableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='AVMSPlus' and IsEnabled=1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetRAAv1TableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetRAAv1TableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetSourceColumnList",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcAvmsPlus",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Vacancy",
												"SchemaName": "dbo"
											}
										}
									}
								},
								{
									"name": "GetImportSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\n\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\n\n\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='AvmsPlus'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}'\n\t) AS SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\t\t\t\t\t  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n/* Apply Transformations */\nSET @collist= \nREPLACE(\nREPLACE(\nREPLACE(\nREPLACE(\n@COLLIST\n,'[DATEOFBIRTH]',\n'(DATEDIFF(YEAR,[DateOfBirth],GETDATE())-(CASE WHEN DATEADD(YY,DATEDIFF(YEAR,[DateOfBirth],GETDATE()),[DateOfBirth]) > GETDATE() THEN 1 ELSE 0 END)) as [Age]'\n)\n,'[Postcode]'\n,'(LEFT([postcode], CASE WHEN CHARINDEX('' '', [postcode]) = 0 THEN LEN([postcode]) ELSE CHARINDEX('' '', [postcode])-1 END)) as [PostCode]'\n)\n,'[EthnicOrigin]'\n,'(@{pipeline().parameters.RunId}+EthnicOrigin) as EID'\n)\n,'[CandidateEthnicOriginId]'\n,'(@{pipeline().parameters.RunId}+CandidateEthnicOriginId) as EID'\n)\n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "CopyAvmsTablesToStagingArea",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GetImportSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@{activity('GetImportSelectQuery').output.firstRow.SourceQuery}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'avms_@{item().TABLE_NAME}' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[avms_@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"maxConcurrentConnections": {
												"value": "@pipeline().parameters.MaxConcurrentConnections",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.DIU",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SrcAvmsPlus",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Vacancy",
												"SchemaName": "dbo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Avms_@{item().TABLE_NAME}",
												"SchemaName": "Stg"
											}
										}
									]
								},
								{
									"name": "GetSourceColumnListToVariable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "AvmsPlus",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyAvmsTablesToStagingArea",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyAvmsTablesToStagingArea').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{pipeline().parameters.RunId}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportAvmsToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{pipeline().parameters.RunId}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportAvmsToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachSourceTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportAvmsToDM'\n     AND RunId=@{pipeline().parameters.RunId}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{pipeline().parameters.RunId}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/datasets/SrcAvmsPlus')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportFAACandidateToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "DELETE FROM Stg.FAA_CandidateDetails\n\nSELECT ShortCode\n FROM Stg.CandidateConfig\nWHERE SourceDb='RAAv2'\n    AND Category='Ethnicity'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GenerateConfig",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateConfig]",
							"storedProcedureParameters": {
								"Category": {
									"value": "Ethnicity",
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@pipeline().parameters.RunId",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SourceDb": {
									"value": "RAAv2",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ImportCandidateToDataMart",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GenerateCopyActvity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CosmosDbMongoDbApiSource",
											"additionalColumns": [
												{
													"name": "CAID",
													"value": {
														"value": "@activity('GenerateCopyActvity').output.firstRow.CAID\n",
														"type": "Expression"
													}
												},
												{
													"name": "RunID",
													"value": {
														"value": "@pipeline().parameters.RunId",
														"type": "Expression"
													}
												}
											],
											"batchSize": 100,
											"filter": {
												"value": "\n{\"MonitoringInformation.Ethnicity\":@{item().ShortCode}}\n",
												"type": "Expression"
											},
											"cursorMethods": {
												"project": "{\"_id\":1,\"LegacyCandidateId\":1}"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['_id']['$binary']"
													},
													"sink": {
														"name": "CandidateId",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['LegacyCandidateId']"
													},
													"sink": {
														"name": "LegacyCandidateId",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "$['CAID']"
													},
													"sink": {
														"name": "EID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "$['RunID']"
													},
													"sink": {
														"name": "RunID",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "SrcFAACosmos",
											"type": "DatasetReference",
											"parameters": {
												"CollectionName": "candidates"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "FAA_CandidateDetails",
												"SchemaName": "Stg"
											}
										}
									]
								},
								{
									"name": "GenerateCopyActvity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @CAID BIGINT\n\nEXECUTE @CAID= [dbo].[GenerateCopyActivityId] @{pipeline().parameters.RunId}, 'RAAv2','Eth'\n\nSELECT @CAID as CAID",
												"type": "Expression"
											},
											"queryTimeout": "01:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ImportCandidateToDataMart",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('ImportCandidateToDataMart').output.Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{pipeline().parameters.RunId}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportFAACandidateEthToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{pipeline().parameters.RunId}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportFAACandidateEthToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportFAACandidateEthToDM'\n     AND RunId=@{pipeline().parameters.RunId}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{pipeline().parameters.RunId}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/datasets/SrcFAACosmos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportRAAToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportRAAUsers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_Users\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAUsersToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$binary']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$type']"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['idamUserId']"
										},
										"sink": {
											"name": "IdamUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userType']"
										},
										"sink": {
											"name": "UserType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdDate']['$date']"
										},
										"sink": {
											"name": "UserCreatedTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastSignedInDate']['$date']"
										},
										"sink": {
											"name": "LastSignedInTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['ukprn']"
										},
										"sink": {
											"name": "Ukprn",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "users"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_Users",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ImportRAAUsersStgToLive",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogSuccessfulExecution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ImportRAAUsersStgToLive]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRAAUserImportErrorDetails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAUsers",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAUsers').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAUsersToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAUsersToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							}
						}
					},
					{
						"name": "ImportRAAVacancies",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAUsers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_Vacancies\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAVacanciesToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$binary']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$type']"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['vacancyReference']"
										},
										"sink": {
											"name": "VacancyReference",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "VacancyStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ownerType']"
										},
										"sink": {
											"name": "OwnerType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['sourceOrigin']"
										},
										"sink": {
											"name": "SourceOrigin",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['sourceType']"
										},
										"sink": {
											"name": "SourceType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['closedDate']['$date']"
										},
										"sink": {
											"name": "ClosedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdDate']['$date']"
										},
										"sink": {
											"name": "CreatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdByUser']['userId']"
										},
										"sink": {
											"name": "CreatedByUserID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['submittedDate']['$date']"
										},
										"sink": {
											"name": "SubmittedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['submittedByUser']['userId']"
										},
										"sink": {
											"name": "SubmittedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['approvedDate']['$date']"
										},
										"sink": {
											"name": "ApprovedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['liveDate']['$date']"
										},
										"sink": {
											"name": "LiveDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']['$date']"
										},
										"sink": {
											"name": "LastUpdatedTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedByUser']['userId']"
										},
										"sink": {
											"name": "LastUpdatedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['isDeleted']"
										},
										"sink": {
											"name": "IsDeleted",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['applicationMethod']"
										},
										"sink": {
											"name": "ApplicationMethod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['applicationUrl']"
										},
										"sink": {
											"name": "ApplicationUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['closingDate']['$date']"
										},
										"sink": {
											"name": "ClosingDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['description']"
										},
										"sink": {
											"name": "VacancyDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerDescription']"
										},
										"sink": {
											"name": "EmployerDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerName']"
										},
										"sink": {
											"name": "EmployerName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerNameOption']"
										},
										"sink": {
											"name": "EmployerNameOption",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['legalEntityName']"
										},
										"sink": {
											"name": "LegalEntityName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['geoCodeMethod']"
										},
										"sink": {
											"name": "GeoCodeMethod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['legalEntityId']"
										},
										"sink": {
											"name": "LegalEntityId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['numberOfPositions']"
										},
										"sink": {
											"name": "NumberOfPositions",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['outcomeDescription']"
										},
										"sink": {
											"name": "OutcomeDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['programmeId']"
										},
										"sink": {
											"name": "ProgrammeId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['qualifications']"
										},
										"sink": {
											"name": "Qualifications",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['skills']"
										},
										"sink": {
											"name": "Skills",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['startDate']['$date']"
										},
										"sink": {
											"name": "StartDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['title']"
										},
										"sink": {
											"name": "VacancyTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['trainingDescription']"
										},
										"sink": {
											"name": "TrainingDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['trainingProvider']['ukprn']"
										},
										"sink": {
											"name": "TrainingProviderUkprn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['trainingProvider']['name']"
										},
										"sink": {
											"name": "TrainingProviderName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['duration']"
										},
										"sink": {
											"name": "WageDuration",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['durationUnit']"
										},
										"sink": {
											"name": "WageDurationUnit",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['workingWeekDescription']"
										},
										"sink": {
											"name": "WorkingWeekDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['weeklyHours']"
										},
										"sink": {
											"name": "WeeklyHours",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['wageType']"
										},
										"sink": {
											"name": "WageType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['fixedWageYearlyAmount']"
										},
										"sink": {
											"name": "FixedWageYearlyAmount",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['wageAdditionalInformation']"
										},
										"sink": {
											"name": "WageAdditionalInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['closureReason']"
										},
										"sink": {
											"name": "ClosureReason",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['applicationInstructions']"
										},
										"sink": {
											"name": "ApplicationIstructions",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerWebsiteUrl']"
										},
										"sink": {
											"name": "EmployerWebsiteUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['accountLegalEntityPublicHashedId']"
										},
										"sink": {
											"name": "AccountLegalEntityPublicHashedId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['thingsToConsider']"
										},
										"sink": {
											"name": "ThingsToConsider",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['deletedDate']['$date']"
										},
										"sink": {
											"name": "DeletedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['deletedByUser']['userId']"
										},
										"sink": {
											"name": "DeletedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerAccountId']"
										},
										"sink": {
											"name": "EmployerAccountId",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "vacancies"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_Vacancies",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRAAv2VacancyImportErrorDetails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancies",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAVacancies').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAVacanciesToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportRAAapplicationReviews",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancies",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_ApplicationReviews\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAapplicationReviewToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$binary']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$type']"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['candidateId']['$binary']"
										},
										"sink": {
											"name": "CandidateId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['candidateId']['$type']"
										},
										"sink": {
											"name": "CandidateIdType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['vacancyReference']"
										},
										"sink": {
											"name": "VacancyReference",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "ApplicationStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdDate']['$date']"
										},
										"sink": {
											"name": "CreatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['submittedDate']['$date']"
										},
										"sink": {
											"name": "SubmittedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['candidateId']['$binary']"
										},
										"sink": {
											"name": "ApplicantId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['candidateId']['$type']"
										},
										"sink": {
											"name": "ApplicantType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['vacancyReference']"
										},
										"sink": {
											"name": "ApplicantVacancyReference",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['applicationDate']['$date']"
										},
										"sink": {
											"name": "ApplicationDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['statusUpdatedDate']['$date']"
										},
										"sink": {
											"name": "StatusUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['statusUpdatedBy']['userId']"
										},
										"sink": {
											"name": "StatusUpdatedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['isWithdrawn']"
										},
										"sink": {
											"name": "IsWithDrawn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId",
											"type": "Int64"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "applicationReviews"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ApplicationReviews",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRAAaplicationReviewImportErrorDetails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAapplicationReviews",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAapplicationReviews').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAApplicationReviewToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogSuccessfulExecutionOfVacancies",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAVacanciesToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Vacancies"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecutionOfApplicationReviews",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAapplicationReviews",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAapplicationReviewToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Vacancies"
								}
							}
						}
					},
					{
						"name": "ImportRAAReferenceDataCandidateSkills",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAapplicationReviews",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"CandidateSkills\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_ReferenceDataCandidateSkills\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAReferenceDataToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "CandidateSkillsId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "CandidateSkillsLastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['skills']"
										},
										"sink": {
											"name": "Skills",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataCandidateSkills",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataApprenticeshipProgrammes",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataCandidateSkills",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"ApprenticeshipProgrammes\"}\n"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataApprenticeshipProgrammes\n",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['_id']"
										},
										"sink": {
											"name": "ProgrammeId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['apprenticeshipType']"
										},
										"sink": {
											"name": "ApprenticeshipType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['title']"
										},
										"sink": {
											"name": "Title",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['effectiveFrom']['$date']"
										},
										"sink": {
											"name": "EffectiveFrom",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['duration']"
										},
										"sink": {
											"name": "Duration",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['isActive']"
										},
										"sink": {
											"name": "IsActive",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['educationLevelNumber']"
										},
										"sink": {
											"name": "EducationLevelNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']['$date']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataApprenticeshipProgrammes",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataQualificationTypes",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataApprenticeshipProgrammes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"QualificationTypes\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataQualificationTypes",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['qualificationTypes']"
										},
										"sink": {
											"name": "QualificationTypes",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataQualificationTypes",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataProfanities",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataQualificationTypes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"Profanities\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataProfanities\n",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['profanities']"
										},
										"sink": {
											"name": "Profanities",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataProfanities",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataBannedPhrases",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataProfanities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"BannedPhrases\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataBannedPhrases",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['bannedPhrases']"
										},
										"sink": {
											"name": "BannedPhrases",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataBannedPhrases",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRDErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataCandidateSkills",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataCandidateSkills').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDAPErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataApprenticeshipProgrammes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataApprenticeshipProgrammes').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDQTErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataQualificationTypes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataQualificationTypes').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportRAAReferenceDataBankHolidays",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBannedPhrases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"BankHolidays\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataBankHolidays\n",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']['$date']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['england-and-wales']['events']"
										},
										"sink": {
											"name": "EnglandAndWalesEvents",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['scotland']['events']"
										},
										"sink": {
											"name": "ScotlandEvents",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['northern-ireland']['events']"
										},
										"sink": {
											"name": "NortherIrelandEvents",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataBankHolidays",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRDProfanitiesErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataProfanities",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataProfanities').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDBannedPhrasesErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBannedPhrases",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataBannedPhrases').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDBankHolidaysErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBankHolidays",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataBankHolidays').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogSuccessfulExecutionOfReferenceData",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBankHolidays",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAReferenceDataToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Vacancies"
								}
							}
						}
					}
				],
				"parameters": {
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					},
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					}
				},
				"variables": {
					"RunId": {
						"type": "String",
						"defaultValue": "\"1\""
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcRAACosmos')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master-ImportVacanciesToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportRAAToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportRAAToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"MaxConcurrentConnections": "4",
								"DIU": "4",
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteImportAvmsToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportRAAToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAvmsToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "CompleteLogging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "BuildPresentationLayerForVacancies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "BuildPresentationLayerForVacancies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteImportFAACandidateToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[BuildVacanciesPresentationLayer]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@activity('GetRunId').output.firstRow.RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportAvmsCandidateToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportAvmsToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAvmsCandidateToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteImportFAACandidateToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportAvmsCandidateToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFAACandidateToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/pipelines/ImportRAAToDataMart')]",
				"[concat(variables('factoryId'), '/pipelines/ImportAvmsToDataMart')]",
				"[concat(variables('factoryId'), '/pipelines/ImportAvmsCandidateToDataMart')]",
				"[concat(variables('factoryId'), '/pipelines/ImportFAACandidateToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-BuildDataMart')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Master-ImportVacanciesToDataMart",
							"type": "PipelineReference"
						},
						"parameters": {
							"RunId": "[parameters('Trigger-BuildDataMart_properties_Master-ImportVacanciesToDataMart_parameters_RunId')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-04-14T10:08:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Master-ImportVacanciesToDataMart')]"
			]
		}
	]
}