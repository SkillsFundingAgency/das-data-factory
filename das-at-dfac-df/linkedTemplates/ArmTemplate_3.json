{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "das-at-dfac-df"
		},
		"Trigger-GenerateKey_properties_AppsCampaignGenerateKey_parameters_RunId": {
			"type": "string",
			"defaultValue": "1"
		},
		"Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_RunId": {
			"type": "string",
			"defaultValue": "1"
		},
		"Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_MaxConcurrentConnections": {
			"type": "int",
			"defaultValue": 4
		},
		"Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_DIU": {
			"type": "int",
			"defaultValue": 4
		},
		"Trigger-BuildDataMart_properties_Master-ImportVacanciesToDataMart_parameters_RunId": {
			"type": "string",
			"defaultValue": "\"1\""
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ImportFinanceToDM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Import Finance to datamart",
				"activities": [
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportFinanceToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetFinanceTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name,PLTableName as PLTableName \nFROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='Finance' and IsEnabled=1 and FullCopyToPL=1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Finance Source Table",
						"description": "For Each Finance Source Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFinanceTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFinanceTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LogStartOfFinanceImportToDatamart",
									"description": "Log Start of Finance Import to Datamart\n",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportFinanceToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetFinanceSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfFinanceImportToDatamart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcFinance",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetFinanceSourceColumnListToVariable",
									"description": "Get Source Column List to Variable ",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetFinanceSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetFinanceSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogFinanceSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetFinanceSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "Finance",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "GetImportFinanceSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVar_FinKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='Finance'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('FK1')}'),'K2','0x'+'@{variables('FK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2)+CASE WHEN len(Replace(Replace(ConfigList,'[',''),']',''))>4 then SUBSTRING(ConfigList,len(ConfigList)/2,4) else SUBSTRING(ConfigList,len(ConfigList)/2,2) end as ConfigList\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='Finance'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                   from STRING_SPLIT(@cols, ',') Cols \n\t     \t      where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColumnList",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogFinanceSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportFinanceToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogFinanceError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportFinanceToDatamart",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "FinancePresentationLayerFullRefresh",
									"description": "Presentation Layer Full Refresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogFinanceSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('FK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('FK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "AsData_PL.@{item().PLTABLENAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "Finance",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.Fin_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Generate_FinKeys_1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogFinanceSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @k1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "Generate_FinKeys_2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Generate_FinKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVar_FinKeys_1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Generate_FinKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FK1",
										"value": {
											"value": "@{activity('Generate_FinKeys_1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVar_FinKeys_2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVar_FinKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FK2",
										"value": {
											"value": "@{activity('Generate_FinKeys_2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopyData",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GetImportFinanceSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@activity('GetImportFinanceSelectQuery').output.firstRow.SourceQuery",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'Fin_@{item().TABLE_NAME}' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[Fin_@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"maxConcurrentConnections": {
												"value": "@pipeline().parameters.MaxConcurrentConnections",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SrcFinance",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "AccountTransfers",
												"SchemaName": "employer_financial"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Fin_@{item().TABLE_NAME}",
												"SchemaName": "Stg"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "For Each Finance Source Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportFinanceToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"FK1": {
						"type": "String"
					},
					"FK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportGAData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Import GA Data ",
				"activities": [
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "CopyGAData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LogStartOfImportToStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "FileName",
										"value": "$$FILEPATH"
									},
									{
										"name": "ImportDate",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "GoogleCloudStorageReadSettings",
									"maxConcurrentConnections": 2,
									"recursive": true,
									"wildcardFolderPath": "gadata",
									"wildcardFileName": "*.parquet"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FullVisitorId",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "FullVisitorId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "ClientId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "VisitId",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "VisitId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "VisitNumber",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "VisitNumber",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "VisitStartDateTime",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "VisitStartDateTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "VisitDate",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "VisitDate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "VisitorId",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "VisitorId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UserId",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "UserId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_Page_PagePath",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_Page_PagePath",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_Page_PagePathLevel1",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_Page_PagePathLevel1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_Page_PagePathLevel2",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_Page_PagePathLevel2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_Page_PagePathLevel3",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_Page_PagePathLevel3",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_Page_PagePathLevel4",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_Page_PagePathLevel4",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_Time",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_Time",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_IsEntrance",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_IsEntrance",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_IsExit",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_IsExit",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EmployerID",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EmployerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ID2",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "ID2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ID3",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "ID3",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ESFAToken",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "ESFAToken",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EventCategory",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EventCategory",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EventAction",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EventAction",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EventLabel",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EventLabel",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EventLabel_ESFAToken",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EventLabel_ESFAToken",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EventLabel_Keyword",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EventLabel_Keyword",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EventLabel_Postcode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EventLabel_Postcode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EventLabel_WithinDistance",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EventLabel_WithinDistance",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EventLabel_Level",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EventLabel_Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EventValue",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EventValue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CD_ClientID",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "CD_ClientId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CD_SearchTerms",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "CD_SearchTerms",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CD_UserID",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "CD_UserId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CD_LevyFlag",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "CD_LevyFlag",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CD_EmployerID",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "CD_EmployerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CD_ESFAToken",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "CD_ESFAToken",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CD_LegalEntityID",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "CD_LegalEntityId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_Page_Hostname",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_Page_Hostname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_Page_PageTitle",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_Page_PageTitle",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TrafficSource_Campaign",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "TrafficSource_Campaign",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Precede_Hits_Page_PagePath",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Precede_Hits_Page_PagePath",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Precede_Hits_Page_PagePathLevel1",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Precede_Hits_Page_PagePathLevel1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Precede_Hits_Page_PagePathLevel2",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Precede_Hits_Page_PagePathLevel2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Precede_Hits_Page_PagePathLevel3",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Precede_Hits_Page_PagePathLevel3",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Precede_Hits_Page_PagePathLevel4",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Precede_Hits_Page_PagePathLevel4",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hits_Type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Hits_Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CD_IsCookieLess",
											"type": "Int64",
											"physicalType": "INT64"
										},
										"sink": {
											"name": "CD_IsCookieLess",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "ESFATokenFlag",
											"type": "Int64",
											"physicalType": "INT64"
										},
										"sink": {
											"name": "ESFATokenFLag",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "FileName"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SrcGAData",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@variables('ProjectContainer')",
										"type": "Expression"
									},
									"FileName": "@variables('FileName')"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "GA_SessionDataDetail",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "GetProjectContainer",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT CASE WHEN '@{pipeline().DataFactory}'='das-at-dfac-df'\n                      THEN 'das-at-databucket'\n                      WHEN '@{pipeline().DataFactory}'='das-test-dfac-df'\n                      THEN 'das-at-databucket'\n                      WHEN '@{pipeline().DataFactory}'='das-pp-dfac-df'\n                      THEN 'das-at-databucket'\n                     WHEN '@{pipeline().DataFactory}'='das-prd-dfac-df'\n                      THEN 'das-prd-databucket'\n                      ELSE 'Unknown'\n           END ProjectContainer\n                ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "SetProjectContainer",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetProjectContainer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProjectContainer",
							"value": {
								"value": "@activity('GetProjectContainer').output.firstRow.ProjectContainer",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LogSuccessfulActivityCopyGAData",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyGAData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportGADataToDMStaging'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogErrorActivityGADataCopyError",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyGAData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[InsertLogErrorDetails]",
								"storedProcedureParameters": {
									"ErrorMessage": {
										"type": "String",
										"value": {
											"value": "@{activity('CopyGAData').Error.message}",
											"type": "Expression"
										}
									},
									"RunId": {
										"type": "Int32",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									},
									"TaskType": {
										"type": "String",
										"value": "ImportGADataToDMStaging"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogStartOfImportToStaging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetProjectContainer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportGADataToDMStaging'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@activity('GetRunId').output.firstRow.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GAPresentationLayerRefresh",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogSuccessfulActivityCopyGAData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ImportGASessionDataToPL]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@{variables('RunId')}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					}
				],
				"variables": {
					"ProjectContainer": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportIncentivesToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetEmpIncTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='EmpInc' and IsEnabled=1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetEmpIncTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetEmpIncTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfImportToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcEmpIncentive",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Accounts",
												"SchemaName": "dbo"
											}
										}
									}
								},
								{
									"name": "GetImportSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVar_IncKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='EmpInc'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('IK1')}'),'K2','0x'+'@{variables('IK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2)+CASE WHEN len(Replace(Replace(ConfigList,'[',''),']',''))>4 then SUBSTRING(ConfigList,len(ConfigList)/2,4) else SUBSTRING(ConfigList,len(ConfigList)/2,2) end as ConfigList\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='EmpInc'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                   from STRING_SPLIT(@cols, ',') Cols \n\t     \t      where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColumnList\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetSourceColumnListToVariable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "EmpInc",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportIncentivesToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "PresentationLayerFullRefresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('IK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('IK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "ASData_PL.EI_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "EmpInc",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.EI_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogStartOfImportToStaging",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportEmployerIncentivesToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportEmployerIncentivesToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "Generate_IncKeys_1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "Generate_IncKeys_2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Generate_IncKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2\n\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVar_IncKeys_1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Generate_IncKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "IK1",
										"value": {
											"value": "@{activity('Generate_IncKeys_1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVar_IncKeys_2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVar_IncKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "IK2",
										"value": {
											"value": "@{activity('Generate_IncKeys_2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopyData",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GetImportSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@activity('GetImportSelectQuery').output.firstRow.SourceQuery",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'EI_@{item().TABLE_NAME}' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[EI_@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"maxConcurrentConnections": {
												"value": "@pipeline().parameters.MaxConcurrentConnections",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SrcEmpIncentive",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Accounts",
												"SchemaName": "dbo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "EI_@{item().TABLE_NAME}",
												"SchemaName": "Stg"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportEmployerIncentivesToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachSourceTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportEmployerIncentivesToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@activity('GetRunId').output.firstRow.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CompleteLogging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogSuccessfulExecution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"IK1": {
						"type": "String"
					},
					"IK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportPFBEToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Import Provide Feedback Employer Cosmos DB",
				"activities": [
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ImportEmployerFeedback",
						"description": "Import Employer Feedback Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": [],
								"pageSize": 100,
								"detectDatetime": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Stg].[PFBE_EmployerFeedback]') AND type in (N'U'))\nDELETE FROM [Stg].[PFBE_EmployerFeedback]\n\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportProvideEmployerFeedbackToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "FeedbackName"
										}
									},
									{
										"source": {
											"path": "[['value']"
										},
										"sink": {
											"name": "FeedbackValue"
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "$['ukprn']"
										},
										"sink": {
											"name": "Ukprn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['accountId']"
										},
										"sink": {
											"name": "AccountId"
										}
									},
									{
										"source": {
											"path": "$['dateTimeCompleted']"
										},
										"sink": {
											"name": "DatetimeCompleted"
										}
									},
									{
										"source": {
											"path": "$['providerRating']"
										},
										"sink": {
											"name": "ProviderRating"
										}
									}
								],
								"collectionReference": "$['providerAttributes']"
							}
						},
						"inputs": [
							{
								"referenceName": "SrcPFBECosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "employer-feedback"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "PFBE_EmployerFeedback",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogSuccessfulExecution",
						"description": "Log Successful Task",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportEmployerFeedback",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportProvideEmployerFeedbackToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ImportPFBEEmployerFeedbackStgToLive",
						"description": "Import Employer Feedback  Staging to LIVE",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogSuccessfulExecution",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ImportEmployerFeedbackStgToLive]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogEmployerFeedbackImportErrorDetails",
						"description": "Log Employer Feedback Import Error Details ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportEmployerFeedback",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportEmployerFeedback').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportProvideEmployerFeedbackToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					},
					"RunId": {
						"type": "string",
						"defaultValue": "150"
					}
				},
				"variables": {
					"RunId": {
						"type": "String",
						"defaultValue": "\"1\""
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportRAAToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportRAAUsers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_Users\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAUsersToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$binary']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$type']"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['idamsUserId']"
										},
										"sink": {
											"name": "IdamUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userType']"
										},
										"sink": {
											"name": "UserType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdDate']['$date']"
										},
										"sink": {
											"name": "UserCreatedTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastSignedInDate']['$date']"
										},
										"sink": {
											"name": "LastSignedInTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerAccountIds']"
										},
										"sink": {
											"name": "EmployerAccountId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['ukprn']"
										},
										"sink": {
											"name": "Ukprn",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "users"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_Users",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ImportRAAUsersStgToLive",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogSuccessfulExecution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ImportRAAUsersStgToLive]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRAAUserImportErrorDetails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAUsers",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAUsers').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAUsersToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAUsersToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							}
						}
					},
					{
						"name": "ImportRAAVacancies",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAUsers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_Vacancies\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAVacanciesToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$binary']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$type']"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['vacancyReference']"
										},
										"sink": {
											"name": "VacancyReference",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "VacancyStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ownerType']"
										},
										"sink": {
											"name": "OwnerType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['sourceOrigin']"
										},
										"sink": {
											"name": "SourceOrigin",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['sourceType']"
										},
										"sink": {
											"name": "SourceType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['closedDate']['$date']"
										},
										"sink": {
											"name": "ClosedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdDate']['$date']"
										},
										"sink": {
											"name": "CreatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdByUser']['userId']"
										},
										"sink": {
											"name": "CreatedByUserID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['submittedDate']['$date']"
										},
										"sink": {
											"name": "SubmittedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['submittedByUser']['userId']"
										},
										"sink": {
											"name": "SubmittedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['approvedDate']['$date']"
										},
										"sink": {
											"name": "ApprovedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['liveDate']['$date']"
										},
										"sink": {
											"name": "LiveDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']['$date']"
										},
										"sink": {
											"name": "LastUpdatedTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedByUser']['userId']"
										},
										"sink": {
											"name": "LastUpdatedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['isDeleted']"
										},
										"sink": {
											"name": "IsDeleted",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['applicationMethod']"
										},
										"sink": {
											"name": "ApplicationMethod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['applicationUrl']"
										},
										"sink": {
											"name": "ApplicationUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['closingDate']['$date']"
										},
										"sink": {
											"name": "ClosingDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['description']"
										},
										"sink": {
											"name": "VacancyDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerDescription']"
										},
										"sink": {
											"name": "EmployerDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerName']"
										},
										"sink": {
											"name": "EmployerName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerNameOption']"
										},
										"sink": {
											"name": "EmployerNameOption",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['legalEntityName']"
										},
										"sink": {
											"name": "LegalEntityName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['geoCodeMethod']"
										},
										"sink": {
											"name": "GeoCodeMethod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['legalEntityId']"
										},
										"sink": {
											"name": "LegalEntityId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['numberOfPositions']"
										},
										"sink": {
											"name": "NumberOfPositions",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['outcomeDescription']"
										},
										"sink": {
											"name": "OutcomeDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['programmeId']"
										},
										"sink": {
											"name": "ProgrammeId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['qualifications']"
										},
										"sink": {
											"name": "Qualifications",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['skills']"
										},
										"sink": {
											"name": "Skills",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['startDate']['$date']"
										},
										"sink": {
											"name": "StartDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['title']"
										},
										"sink": {
											"name": "VacancyTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['trainingDescription']"
										},
										"sink": {
											"name": "TrainingDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['trainingProvider']['ukprn']"
										},
										"sink": {
											"name": "TrainingProviderUkprn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['trainingProvider']['name']"
										},
										"sink": {
											"name": "TrainingProviderName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['duration']"
										},
										"sink": {
											"name": "WageDuration",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['durationUnit']"
										},
										"sink": {
											"name": "WageDurationUnit",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['workingWeekDescription']"
										},
										"sink": {
											"name": "WorkingWeekDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['weeklyHours']"
										},
										"sink": {
											"name": "WeeklyHours",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['wageType']"
										},
										"sink": {
											"name": "WageType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['fixedWageYearlyAmount']"
										},
										"sink": {
											"name": "FixedWageYearlyAmount",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['wageAdditionalInformation']"
										},
										"sink": {
											"name": "WageAdditionalInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['closureReason']"
										},
										"sink": {
											"name": "ClosureReason",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['applicationInstructions']"
										},
										"sink": {
											"name": "ApplicationIstructions",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerWebsiteUrl']"
										},
										"sink": {
											"name": "EmployerWebsiteUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['accountLegalEntityPublicHashedId']"
										},
										"sink": {
											"name": "AccountLegalEntityPublicHashedId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['thingsToConsider']"
										},
										"sink": {
											"name": "ThingsToConsider",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['deletedDate']['$date']"
										},
										"sink": {
											"name": "DeletedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['deletedByUser']['userId']"
										},
										"sink": {
											"name": "DeletedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerAccountId']"
										},
										"sink": {
											"name": "EmployerAccountId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId"
										}
									},
									{
										"source": {
											"path": "$['employerLocation']['postcode']"
										},
										"sink": {
											"name": "EmployerPostCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerLocation']['addressLine1']"
										},
										"sink": {
											"name": "EmployerAddressLine1",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerLocation']['addressLine2']"
										},
										"sink": {
											"name": "EmployerAddressLine2",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerLocation']['addressLine3']"
										},
										"sink": {
											"name": "EmployerAddressLine3",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerLocation']['addressLine4']"
										},
										"sink": {
											"name": "EmployerAddressLine4",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerLocation']['latitude']"
										},
										"sink": {
											"name": "EmployerLatitude",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerLocation']['longitude']"
										},
										"sink": {
											"name": "EmployerLongitude",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "vacancies"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_Vacancies",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRAAv2VacancyImportErrorDetails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancies",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAVacancies').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAVacanciesToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportRAAapplicationReviews",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancies",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_ApplicationReviews\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAapplicationReviewToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$binary']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$type']"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['candidateId']['$binary']"
										},
										"sink": {
											"name": "CandidateId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['candidateId']['$type']"
										},
										"sink": {
											"name": "CandidateIdType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['vacancyReference']"
										},
										"sink": {
											"name": "VacancyReference",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "ApplicationStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdDate']['$date']"
										},
										"sink": {
											"name": "CreatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['submittedDate']['$date']"
										},
										"sink": {
											"name": "SubmittedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['candidateId']['$binary']"
										},
										"sink": {
											"name": "ApplicantId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['candidateId']['$type']"
										},
										"sink": {
											"name": "ApplicantType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['vacancyReference']"
										},
										"sink": {
											"name": "ApplicantVacancyReference",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['applicationDate']['$date']"
										},
										"sink": {
											"name": "ApplicationDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['statusUpdatedDate']['$date']"
										},
										"sink": {
											"name": "StatusUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['statusUpdatedBy']['userId']"
										},
										"sink": {
											"name": "StatusUpdatedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['isWithdrawn']"
										},
										"sink": {
											"name": "IsWithDrawn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId",
											"type": "Int64"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "applicationReviews"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ApplicationReviews",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRAAaplicationReviewImportErrorDetails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAapplicationReviews",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAapplicationReviews').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAApplicationReviewToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogSuccessfulExecutionOfVacancies",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAVacanciesToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Vacancies"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecutionOfApplicationReviews",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAapplicationReviews",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAapplicationReviewToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Vacancies"
								}
							}
						}
					},
					{
						"name": "ImportRAAReferenceDataCandidateSkills",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAapplicationReviews",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100,
								"filter": "{\"_id\":\"CandidateSkills\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_ReferenceDataCandidateSkills\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAReferenceDataToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "CandidateSkillsId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "CandidateSkillsLastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['skills']"
										},
										"sink": {
											"name": "Skills",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataCandidateSkills",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataApprenticeshipProgrammes",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataCandidateSkills",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100,
								"filter": "{\"_id\":\"ApprenticeshipProgrammes\"}\n"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataApprenticeshipProgrammes\n",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['_id']"
										},
										"sink": {
											"name": "ProgrammeId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['apprenticeshipType']"
										},
										"sink": {
											"name": "ApprenticeshipType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['title']"
										},
										"sink": {
											"name": "Title",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['effectiveFrom']['$date']"
										},
										"sink": {
											"name": "EffectiveFrom",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['duration']"
										},
										"sink": {
											"name": "Duration",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['isActive']"
										},
										"sink": {
											"name": "IsActive",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['educationLevelNumber']"
										},
										"sink": {
											"name": "EducationLevelNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']['$date']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId"
										}
									}
								],
								"collectionReference": "$['data']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataApprenticeshipProgrammes",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataQualificationTypes",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataApprenticeshipProgrammes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100,
								"filter": "{\"_id\":\"QualificationTypes\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataQualificationTypes",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['qualificationTypes']"
										},
										"sink": {
											"name": "QualificationTypes",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataQualificationTypes",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataProfanities",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataQualificationTypes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100,
								"filter": "{\"_id\":\"Profanities\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataProfanities\n",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['profanities']"
										},
										"sink": {
											"name": "Profanities",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataProfanities",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataBannedPhrases",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataProfanities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100,
								"filter": "{\"_id\":\"BannedPhrases\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataBannedPhrases",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['bannedPhrases']"
										},
										"sink": {
											"name": "BannedPhrases",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataBannedPhrases",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRDErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataCandidateSkills",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataCandidateSkills').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDAPErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataApprenticeshipProgrammes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataApprenticeshipProgrammes').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDQTErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataQualificationTypes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataQualificationTypes').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportRAAReferenceDataBankHolidays",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBannedPhrases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100,
								"filter": "{\"_id\":\"BankHolidays\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataBankHolidays\n",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']['$date']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['england-and-wales']['events']"
										},
										"sink": {
											"name": "EnglandAndWalesEvents",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['scotland']['events']"
										},
										"sink": {
											"name": "ScotlandEvents",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['northern-ireland']['events']"
										},
										"sink": {
											"name": "NortherIrelandEvents",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataBankHolidays",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRDProfanitiesErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataProfanities",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataProfanities').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDBannedPhrasesErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBannedPhrases",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataBannedPhrases').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDBankHolidaysErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBankHolidays",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataBankHolidays').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogSuccessfulExecutionOfReferenceData",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBankHolidays",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAReferenceDataToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Vacancies"
								}
							}
						}
					},
					{
						"name": "ImportRAAVacancyReviews",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBankHolidays",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100,
								"filter": "\n"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_VacancyReviews\n\n INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t,'ImportRAAVacancyReviewsToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['fieldIdentifier']"
										},
										"sink": {
											"name": "ManualQaFieldIndicator",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['isChangeRequested']"
										},
										"sink": {
											"name": "ManualQaFieldChangeRequested",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$binary']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$type']"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['vacancyReference']"
										},
										"sink": {
											"name": "VacancyReference",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdDate']['$date']"
										},
										"sink": {
											"name": "CreatedTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerAccountId']"
										},
										"sink": {
											"name": "EmployerAccountId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['submittedByUser']['userId']"
										},
										"sink": {
											"name": "UserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['vacancySnapshot']['submittedDate']['$date']"
										},
										"sink": {
											"name": "SubmittedTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['manualOutcome']"
										},
										"sink": {
											"name": "ManualOutcome",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['manualQaComment']"
										},
										"sink": {
											"name": "ManualQaComment",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId",
											"type": "Int64"
										}
									}
								],
								"collectionReference": "$['manualQaFieldIndicators']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "vacancyReviews"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_VacancyReviews",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogSuccessfulExecutionOfVacancyReviews",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancyReviews",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DELETE FROM Stg.RAA_VacancyReviews Where ManualQaFieldChangeRequested='false'\n\nDECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAVacancyReviewsToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Vacancies"
								}
							}
						}
					},
					{
						"name": "LogRAAVacancyReviewsErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancyReviews",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAVacancyReviews').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAVacancyReviewsToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					},
					"RunId": {
						"type": "string",
						"defaultValue": "150"
					}
				},
				"variables": {
					"RunId": {
						"type": "String",
						"defaultValue": "150"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportReservationToDM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Import Reservation to Datamart",
				"activities": [
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportReservationToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "For Each Reservation Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportReservationToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetResvTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name,PLTableName as PLTableName \nFROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='Reservation' and IsEnabled=1 and FullCopyToPL=1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Reservation Table",
						"description": "For Each Reservation Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetResvTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetResvTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LogStartOfResvImportToDatamart",
									"description": "Log Start of Import to Datamart",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportReservationToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetResvSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfResvImportToDatamart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcReservation",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetResvSourceColumnListToVariable",
									"description": "Get Commit Source Column List to Variable ",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetResvSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetResvSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogResvSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetResvSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "Reservation",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "GetImportResvSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVar_ResvKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='Reservation'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('RK1')}'),'K2','0x'+'@{variables('RK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2)+CASE WHEN len(Replace(Replace(ConfigList,'[',''),']',''))>4 then SUBSTRING(ConfigList,len(ConfigList)/2,4) else SUBSTRING(ConfigList,len(ConfigList)/2,2) end as ConfigList\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='Reservation'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                   from STRING_SPLIT(@cols, ',') Cols \n\t     \t      where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColumnList",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogResvSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportReservationToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogResvError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportReservationToDatamart",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ResvPresentationLayerFullRefresh",
									"description": "Presentation Layer Full Refresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogResvSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('RK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('RK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "AsData_PL.@{item().PLTABLENAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "Reservation",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.Resv_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Generate_ResvKeys_1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogResvSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "Generate_ResvKeys_2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Generate_ResvKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2\n\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVar_ResvKeys_1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Generate_ResvKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RK1",
										"value": {
											"value": "@{activity('Generate_ResvKeys_1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVar_ResvKeys_2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVar_ResvKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RK2",
										"value": {
											"value": "@{activity('Generate_ResvKeys_2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopyData",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GetImportResvSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@activity('GetImportResvSelectQuery').output.firstRow.SourceQuery",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'Resv_@{item().TABLE_NAME}' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[Resv_@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"maxConcurrentConnections": {
												"value": "@pipeline().parameters.MaxConcurrentConnections",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SrcReservation",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Reservation",
												"SchemaName": "dbo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Resv_@{item().TABLE_NAME}",
												"SchemaName": "Stg"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string"
					},
					"MaxConcurrentConnections": {
						"type": "int"
					},
					"DIU": {
						"type": "int"
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"RK1": {
						"type": "String"
					},
					"RK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportUsersToDM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name,PLTableName as PLTableName FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='Users' and IsEnabled=1 and FullCopyToPL=1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceTableInUser",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfImportToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcUsers",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "dbo"
											}
										}
									}
								},
								{
									"name": "GetImportSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVariableUK2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\n\n\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\n\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='Users'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('UK1')}'),'K2','0x'+'@{variables('UK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2)+CASE WHEN len(Replace(Replace(ConfigList,'[',''),']',''))>4 then SUBSTRING(ConfigList,len(ConfigList)/2,4) else SUBSTRING(ConfigList,len(ConfigList)/2,2) end as ConfigList\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='Users'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                   from STRING_SPLIT(@cols, ',') Cols \n\t     \t      where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\n \n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColumnList",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetSourceColumnListToVariable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "Users",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportUsersToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "PresentationLayerFullRefresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('UK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('UK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "AsData_PL.@{item().PLTABLENAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "Users",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.EAUser_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogStartOfImportToStaging",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportUsersToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportUsersToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GenerateUK1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @k1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GenerateUK2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GenerateUK1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVariableUK1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GenerateUK2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "UK1",
										"value": {
											"value": "@{activity('GenerateUK1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVariableUK2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVariableUK1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "UK2",
										"value": {
											"value": "@{activity('GenerateUK2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopyData",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GetImportSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@activity('GetImportSelectQuery').output.firstRow.SourceQuery",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'EAUser_@{item().TABLE_NAME}' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[EAUser_@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"maxConcurrentConnections": {
												"value": "@pipeline().parameters.MaxConcurrentConnections",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SrcUsers",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "dbo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "EAUser_@{item().TABLE_NAME}",
												"SchemaName": "Stg"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportUsersToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachSourceTableInUser",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportUsersToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"UK1": {
						"type": "String"
					},
					"UK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessTPRFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetLatestFileNamesInTPR",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SrcTprBlobStorage",
								"type": "DatasetReference",
								"parameters": {
									"ColumnDelimiter": "\t",
									"EscapeCharacter": "\\",
									"SubFolder": " ",
									"RootFolder": "tpr"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@adddays(utcnow(),-1)",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@utcnow()",
									"type": "Expression"
								}
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetLatestFileNamesInTPR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetLatestFileNamesInTPR').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CheckItsExpectedFile",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckFileStatus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(and(startswith(item().name,'apprenticeship'),endswith(item().name,'.txt')),equals(activity('CheckFileStatus').output.firstRow.FileStatus,'Start Process'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IgnoreRun",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.00:30:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": "SELECT '1'",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DestTPR",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "log_execution_results",
															"SchemaName": "mgmt"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "GetSrcFileDetailsToDb",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "SetRunId",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.00:30:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "INSERT INTO Mgmt.SourceFileList\n(FileName)\nselect '@{item().name}'\n\n/* Get Source File ID */\n\nDeclare @SourceFileId int\n\nSELECT @SourceFileID=Max(SourceFileId) From Mgmt.SourceFileList WHERE FileName='@{item().name}' \n\n\n\n/* Update SourceFileList with the  RunId that's processing the File */\n UPDATE SFL\n    SET SFL.RunId=@{variables('RunId')}\n   FROM Mgmt.SourceFileList SFL\n  WHERE SFL.SourceFileID=@SourceFileId\n\nSELECT @SourceFileId as SourceFileId\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DestTPR",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "log_execution_results",
															"SchemaName": "mgmt"
														}
													}
												}
											},
											{
												"name": "GetRunId",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "GenerateRunId",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.00:30:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": "SELECT CAST(MAX(Run_Id) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DestTPR",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "LOG_EXECUTION_RESULTS",
															"SchemaName": "MGMT"
														}
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "GenerateRunId",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.00:30:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[GenerateRunId]"
												},
												"linkedServiceName": {
													"referenceName": "tpr_dbconnectionstring",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SetRunId",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "GetRunId",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "RunId",
													"value": {
														"value": "@activity('GetRunId').output.firstRow.RunId",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LogStartOfImport",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "GetSrcFileDetailsToDb",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.00:10:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-2'\n\t   ,'ADF-ImportDataFromFile'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DestTPR",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "Log_Execution_Results",
															"SchemaName": "Mgmt"
														}
													}
												}
											},
											{
												"name": "CopyFileToDb",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LogStartOfImport",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"additionalColumns": [
															{
																"name": "FileName",
																"value": {
																	"value": "@{item().name}",
																	"type": "Expression"
																}
															},
															{
																"name": "RunId",
																"value": {
																	"value": "@variables('RunId')",
																	"type": "Expression"
																}
															}
														],
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"wildcardFileName": {
																"value": "@{item().name}",
																"type": "Expression"
															}
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings",
															"skipLineCount": 1
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": "/* Truncate Staging Table */\n\n  TRUNCATE TABLE Tpr.StagingData\n\n  /* Drop Existing Index before the load */\n\n   DROP INDEX IF EXISTS NCI_Staging_TPR ON Tpr.StagingData",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true,
													"logSettings": {
														"enableCopyActivityLog": true,
														"copyActivityLogSettings": {
															"logLevel": "Warning",
															"enableReliableLogging": false
														},
														"logLocationSettings": {
															"linkedServiceName": {
																"referenceName": "tpr_strconnection",
																"type": "LinkedServiceReference"
															},
															"path": ""
														}
													},
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"type": "String",
																	"ordinal": 1
																},
																"sink": {
																	"name": "RecordType1",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 2
																},
																"sink": {
																	"name": "TPRUniqueID",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 3
																},
																"sink": {
																	"name": "DistrictNumber",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 4
																},
																"sink": {
																	"name": "Reference",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 5
																},
																"sink": {
																	"name": "AODistrict",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 6
																},
																"sink": {
																	"name": "AOTaxType",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 7
																},
																"sink": {
																	"name": "AOCheckChar",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 8
																},
																"sink": {
																	"name": "AOReference",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 9
																},
																"sink": {
																	"name": "StartDate",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 10
																},
																"sink": {
																	"name": "EndDate",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 11
																},
																"sink": {
																	"name": "EndDateCode",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 12
																},
																"sink": {
																	"name": "RestartDate",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 13
																},
																"sink": {
																	"name": "ReviewYr",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 14
																},
																"sink": {
																	"name": "CompanyRegNo",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 15
																},
																"sink": {
																	"name": "TradeClass",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 16
																},
																"sink": {
																	"name": "AOInd",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 17
																},
																"sink": {
																	"name": "XferType",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 18
																},
																"sink": {
																	"name": "UniqueRefDistrict",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 19
																},
																"sink": {
																	"name": "UniqueReference",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 20
																},
																"sink": {
																	"name": "RecordType2",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 21
																},
																"sink": {
																	"name": "Name1",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 22
																},
																"sink": {
																	"name": "Name2",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 23
																},
																"sink": {
																	"name": "TelephoneNumber",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 24
																},
																"sink": {
																	"name": "EmailAddress",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 25
																},
																"sink": {
																	"name": "AddressType",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 26
																},
																"sink": {
																	"name": "ADI",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 27
																},
																"sink": {
																	"name": "AddressLine1",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 28
																},
																"sink": {
																	"name": "AddressLine2",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 29
																},
																"sink": {
																	"name": "AddressLine3",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 30
																},
																"sink": {
																	"name": "AddressLine4",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 31
																},
																"sink": {
																	"name": "AddressLine5",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 32
																},
																"sink": {
																	"name": "PostCode",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 33
																},
																"sink": {
																	"name": "ForeignCountry",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 34
																},
																"sink": {
																	"name": "AddressVerifiedIndicator",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 35
																},
																"sink": {
																	"name": "RecordType3",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 36
																},
																"sink": {
																	"name": "SignalUniqueID",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 37
																},
																"sink": {
																	"name": "SignalCode",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 38
																},
																"sink": {
																	"name": "SignalChanged",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 39
																},
																"sink": {
																	"name": "SignalStartYear",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 40
																},
																"sink": {
																	"name": "SignalEndYear",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 41
																},
																"sink": {
																	"name": "SignalValue",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 42
																},
																"sink": {
																	"name": "RecordType7",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 43
																},
																"sink": {
																	"name": "EmployerSchemeHistoryUniqueID",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 44
																},
																"sink": {
																	"name": "EmployerSchemeHistStartYear",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 45
																},
																"sink": {
																	"name": "EmployerSchemeHistEndYear",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 46
																},
																"sink": {
																	"name": "SchemeType",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 47
																},
																"sink": {
																	"name": "RecordType12",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 48
																},
																"sink": {
																	"name": "EmployerCountID",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 49
																},
																"sink": {
																	"name": "EEC_Code",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 50
																},
																"sink": {
																	"name": "DateTaken",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 51
																},
																"sink": {
																	"name": "NumberCounted",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"name": "FileName",
																	"type": "String"
																},
																"sink": {
																	"name": "SourceFileName",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"name": "RunId",
																	"type": "String"
																},
																"sink": {
																	"name": "RunID",
																	"type": "Int32",
																	"physicalType": "int"
																}
															}
														],
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SrcTprBlobStorage",
														"type": "DatasetReference",
														"parameters": {
															"ColumnDelimiter": "\t",
															"EscapeCharacter": "\\",
															"SubFolder": " ",
															"RootFolder": "tpr"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DestTPR",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "StagingData",
															"SchemaName": "Tpr"
														}
													}
												]
											},
											{
												"name": "UpdateLogAndRecreateIndex",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "CopyFileToDb",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "/* Get LogId */\n\nDeclare @LogID Int\nDeclare @SourceFileId Int\n\nSELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results \n   WHERE StoredProcedureName='ADF-ImportDataFromFile'\n     AND RunId= @{variables('RunId')}\n\n\n/* Update Counts in RecordCounts */\n\n   INSERT INTO Mgmt.Log_Record_Counts\n   (LogId,RunId,SourceTableName,TargetTableName,SourceRecordCount,TargetRecordCount,InvalidRecordCount)\n   SELECT  @LogID\n         , @{variables('RunId')}\n\t\t ,'@{item().name}'\n\t     ,'StagingData'\n\t\t ,@{activity('CopyFileToDb').output.rowsRead}\n\t\t ,(SELECT COUNT(*) FROM Tpr.StagingData WHERE SourceFileName='@{item().name}')\n                 ,@{activity('CopyFileToDb').output.rowsSkipped}\n\n  /* Update Flag in SourceFileList as Loaded */\n\n  UPDATE SFL\n     SET SFL.LoadedToStaging=1\n\t    ,SFL.StagingLoadDate=getdate()\n\t--\t,SFL.RunId='@{variables('RunId')}'\n    FROM Mgmt.SourceFileList SFL\n   WHERE SFL.SourceFileId=@{activity('GetSrcFileDetailsToDb').output.firstRow.SourceFileId}\n\t\t\t \t\t\t \n\n/* Recreate the Index */\n\nCREATE NONCLUSTERED INDEX NCI_Staging_TPR\n      ON Tpr.StagingData(TPRUniqueID)\n\n\n\n/* Update Log Execution Results as Success if the query ran succesfully*/\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending- Go To Step3 RunValidationChecks'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT '1'\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DestTPR",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "Log_Execution_Results",
															"SchemaName": "Mgmt"
														}
													}
												}
											},
											{
												"name": "ExecuteETLProcs",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "DeleteProcessedFile",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.07:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "DECLARE @RunId int\nDECLARE @RetentionDate datetime\n\nSET @RunId = @{variables('RunId')}\n\nSELECT @RetentionDate=DATEADD(MONTH, -1, GETDATE()) \n\n/* Run Validation Checks if Import File is Successful */\n\nIF EXISTS (SELECT * FROM Mgmt.Log_Execution_Results where StoredProcedureName='ADF-ImportDataFromFile' and Execution_Status=1 and RunId=@RunId)\nBEGIN \nEXEC dbo.RunValidationChecks @{variables('RunId')}\nEND\nELSE RAISERROR( 'Import Data From File Failed in ADF -Check Log Table For Errors',1,1)\n\n\n\n/* Import Valid Records to Target Clone Tables */\n\nIF EXISTS (SELECT * FROM Mgmt.Log_Execution_Results where StoredProcedureName='RunValidationChecks' and Execution_Status=1 and RunId=@RunId) \nBEGIN\nEXEC dbo.LoadTargetCloneTables @{variables('RunId')}\nEND\nELSE RAISERROR( 'Validation Checks Failed-Check Log Table For Errors',1,1)\n\n\n/* Swap Clone Tables With Live */\n\nIF EXISTS (SELECT * FROM Mgmt.Log_Execution_Results where StoredProcedureName='LoadTargetCloneTables' and Execution_Status=1 and RunId=@RunId) \nBEGIN\nEXEC dbo.LoadTargetTables @{variables('RunId')}\nEND\nELSE RAISERROR( 'Loading Clone Tables Failed-Check Log Table For Errors',1,1)\n\n\n\n--/* Update History Table with Processed File */\n\nIF EXISTS (SELECT * FROM Mgmt.Log_Execution_Results where StoredProcedureName='LoadTargetTables' and Execution_Status=1 and RunId=@RunId)\nBEGIN\nEXEC dbo.UpdateHistoryTable @{variables('RunId')},@RetentionDate\nEND\nELSE RAISERROR( 'Loading Target Tables Failed-Check Log Table For Errors',1,1)\n\n\n\n\n--/* Raise Error if Updating History Table Failed */\n\nIF EXISTS (SELECT * FROM Mgmt.Log_Execution_Results where StoredProcedureName='UpdateHistoryTable' and Execution_Status<>1 and RunId=@{variables('RunId')})\nBEGIN\nRAISERROR( 'Updating History Table Failed-Check Log Table For Errors',1,1)\nEND\n\n\nIF EXISTS (SELECT * FROM Mgmt.Log_Execution_Results where StoredProcedureName='UpdateHistoryTable' and Execution_Status=1 and RunId=@{variables('RunId')})\nBEGIN\nUPDATE Mgmt.Log_RunId SET EndDateTime=getdate() Where Run_Id=@{variables('RunId')}\nEND\n\nSELECT '1'\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DestTPR",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "Log_Execution_Results",
															"SchemaName": "Mgmt"
														}
													}
												}
											},
											{
												"name": "DeleteProcessedFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "UpdateLogAndRecreateIndex",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.00:30:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "SrcTprBlobStorage",
														"type": "DatasetReference",
														"parameters": {
															"ColumnDelimiter": "\t",
															"EscapeCharacter": "\\",
															"SubFolder": " ",
															"RootFolder": "tpr"
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "LogError",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "CopyFileToDb",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.00:30:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": " DECLARE @LogID int\n DECLARE @ErrorMessage varchar(max)\n DECLARE @RunId Bigint\n DECLARE @ErrorId int\n\n\n\n SET @Runid=@{variables('RunId')}\n\n\n SELECT @LogID = MAX(LogID)\n   FROM Mgmt.Log_Execution_Results\n  WHERE StoredProcedureName='ADF-ImportDataFromFile'\n\n  INSERT INTO Mgmt.Log_Error_Details\n\t  (\n\t   ErrorProcedure\n\t  ,ErrorMessage\n\t  ,ErrorDateTime\n\t  ,Run_Id\n\t  )\n  SELECT \n        \n\t    'ADF-ImportDataFromFile',\n            @{concat('''',replace(activity('CopyFileToDb').Error.message,'''',''''''),'''')},\n\t    GETDATE(),\n\t\t@RunId as RunId; \n\n  SELECT @ErrorId=MAX(ErrorId) FROM Mgmt.Log_Error_Details\n\n/* Update Log Execution Results as Fail if there is an Error*/\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=0\n      ,EndDateTime=getdate()\n\t  ,ErrorId=@ErrorId\n WHERE LogId=@LogID\n   AND RunID=@RunId\n\nSELECT 'NA'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DestTPR",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "Log_Execution_Results",
															"SchemaName": "mgmt"
														}
													}
												}
											},
											{
												"name": "CopySkippedRowsToLogTable",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "CopyFileToDb",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"additionalColumns": [
															{
																"name": "RunId",
																"value": {
																	"value": "@variables('RunId')",
																	"type": "Expression"
																}
															},
															{
																"name": "FileName",
																"value": {
																	"value": "@{item().name}",
																	"type": "Expression"
																}
															}
														],
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"wildcardFileName": "*.txt"
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings",
															"skipLineCount": 1
														}
													},
													"sink": {
														"type": "AzureSqlSink"
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": false,
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"type": "String",
																	"physicalType": "String",
																	"ordinal": 1
																},
																"sink": {
																	"name": "ErrorDateTime",
																	"type": "DateTime",
																	"physicalType": "datetime2"
																}
															},
															{
																"source": {
																	"type": "String",
																	"physicalType": "String",
																	"ordinal": 3
																},
																"sink": {
																	"name": "ErrorName",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 4
																},
																"sink": {
																	"name": "ErrorRecord",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"type": "String",
																	"ordinal": 5
																},
																"sink": {
																	"name": "ErrorMessage",
																	"type": "String",
																	"physicalType": "varchar"
																}
															},
															{
																"source": {
																	"name": "RunId",
																	"type": "String"
																},
																"sink": {
																	"name": "RunId",
																	"type": "Int64",
																	"physicalType": "bigint"
																}
															},
															{
																"source": {
																	"name": "FileName",
																	"type": "String"
																},
																"sink": {
																	"name": "SrcFileName",
																	"type": "String",
																	"physicalType": "varchar"
																}
															}
														],
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SrcTprBlobStorage",
														"type": "DatasetReference",
														"parameters": {
															"ColumnDelimiter": ",",
															"EscapeCharacter": "\"",
															"SubFolder": " ",
															"RootFolder": "@replace(activity('CopyFileToDb').output.logFilePath,'tpr/','')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DestTPR",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "SrcFileRejectedRecords",
															"SchemaName": "tpr"
														}
													}
												]
											},
											{
												"name": "DeleteLogFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopySkippedRowsToLogTable",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.01:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "SrcTprBlobStorage",
														"type": "DatasetReference",
														"parameters": {
															"ColumnDelimiter": "\t",
															"EscapeCharacter": "\\",
															"SubFolder": " ",
															"RootFolder": {
																"value": "@replace(activity('CopyFileToDb').output.logFilePath,'tpr/','')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "*.txt",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "CheckFileStatus",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "IF EXISTS (SELECT FileName FROM Mgmt.SourceFileList where FileName='@{item().name}' and datediff(MINUTE,fileuploadeddatetime,getdate()) <=15)\nbegin\nSELECT 'Already In Process' as FileStatus\nend\nELSE \nBEGIN\nSELECT 'Start Process' as FileStatus\nEND",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestTPR",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "log_execution_results",
												"SchemaName": "mgmt"
											}
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"FileName": {
						"type": "Array"
					},
					"RunId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master-ImportAccUsersComtFinResvToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportUsersToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportUsersToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportAccountsToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportUsersToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAccountsToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "CompleteLogging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "BuildModelledPL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ExecuteImportComtToDM",
						"description": "Execute Import Commitment data to DM ",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportAccountsToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportCommitmentToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportFinToDM",
						"description": "Execute Import Finance data to DM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportComtToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFinanceToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportReservationToDM",
						"description": "Import Reservation to DM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportFinToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportReservationToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "BuildModelledPL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteImportAssessorToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.04:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Build_Modelled_PL]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@{activity('GetRunId').output.firstRow.RunId}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportRedundancyToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportReservationToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAppRedundancyToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportCRSDeliveryToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportRedundancyToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFAT2CRSDeliveryToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportCRSToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportCRSDeliveryToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFAT2CRSToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportApplyToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportCRSToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportApplyToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportAssessorToDM",
						"description": "Execute Assessor EPAO",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportApplyToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAssessorToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ImportUsersToDM')]",
				"[concat(variables('factoryId'), '/pipelines/ImportFinanceToDM')]",
				"[concat(variables('factoryId'), '/pipelines/ImportReservationToDM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master-ImportCampaignDataToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportCampaignDataToDataMart_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetDateFilterValuesForPrograms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportCampaignDataToDataMart_1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								},
								"StartDateFilter": {
									"value": "@{activity('GetDateFilterValuesForPrograms').output.firstRow.StartDateFilter}",
									"type": "Expression"
								},
								"EndDateFilter": {
									"value": "@{activity('GetDateFilterValuesForPrograms').output.firstRow.EndDateFilter}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LogStartOfCampaignImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{activity('GetRunId').output.firstRow.RunId}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportMarketoCampaignDataToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogCompleteCampaignImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "UpdateImportStatusInConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/* Log the Import of Campaign Data as Complete */\n\nDECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportMarketoCampaignDataToDM'\n     AND RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{activity('GetRunId').output.firstRow.RunId}\n\n/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ExecuteImportMarketoBulkExtractTablesToPL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteImportCampaignDataToDataMart_2_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ImportMarketoBulkExtractTablesToPL]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@activity('GetRunId').output.firstRow.RunId",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetDateFilterValuesForLeads",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ExecuteImportMarketoReferenceTablesToPL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "IF EXISTS (SELECT * FROM Mtd.MarketoFilterConfig WHERE ISNULL(ImportStatus,0)=0)\n  BEGIN\n  SELECT MFC_ID,StartDateFilter,EndDateFilter,'History' as FilterType\n  FROM Mtd.MarketoFilterConfig\n  WHERE MFC_Id IN (\n  SELECT min(mfc_id)\n    FROM Mtd.MarketoFilterConfig\n   WHERE Isnull(ImportStatus,0)=0)\n   END\n   ELSE \n   BEGIN\n   select -1 as MFC_ID\n         ,convert(varchar,cast(getdate()-1 as date))+'T00:00:00Z' as StartDateFilter\n\t\t ,convert(varchar,cast(getdate() as date))+'T00:00:00Z' as EndDateFilter\n\t\t ,'Latest' as FilterType\n   END",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetProgramFilterValues",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetDateFilterValuesForActivities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "IF EXISTS (SELECT * FROM ASData_PL.MarketoPrograms WHERE ISNULL(LeadProgramImportStatus,0)=0)\n  BEGIN\n  IF ((SELECT isnull(LeadProgramImportStatus,0) from AsData_PL.MarketoPrograms WHERE ProgramId=1208) =0) -- Get Redundancy First\n  BEGIN\n  SELECT ProgramId,ProgramName\n    FROM ASData_PL.MarketoPrograms\n   WHERE ProgramId=1208\n  END\n  ELSE BEGIN\n SELECT ProgramId,ProgramName\n FROM AsData_PL.MarketoPrograms\nWHERE ProgramId in \n  (SELECT max(ProgramId) as ProgramId\n    FROM ASData_PL.MarketoPrograms\n   WHERE ISNULL(LeadProgramImportStatus,0)=0)\n   END\n   END\n   ELSE \n   BEGIN\n   UPDATE AsData_PL.MarketoPrograms\n         SET LeadProgramImportStatus=0\n\n  SELECT ProgramId,ProgramName\n    FROM AsData_PL.MarketoPrograms\nWHERE ProgramId in \n  (SELECT max(ProgramId) as ProgramId\n    FROM ASData_PL.MarketoPrograms\n   WHERE ISNULL(LeadProgramImportStatus,0)=0)\n    END\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ExecuteImportMarketoReferenceTablesToPL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteImportCampaignDataToDataMart_1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ImportMarketoReferenceTablesToPL]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@activity('GetRunId').output.firstRow.RunId",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateImportStatusInConfig",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ExecuteImportMarketoBulkExtractTablesToPL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/* Update Config Status */\nIF ('@{activity('GetDateFilterValuesForLeads').output.firstRow.FilterType}'='History')\nBEGIN\n\tUPDATE Mtd.MarketoFilterConfig\n\t   SET ImportStatus=1\n\t      ,ImportDate=GETDATE()\n\t WHERE MFC_Id=@{activity('GetDateFilterValuesForLeads').output.firstRow.MFC_ID}\nEND \n\n/* Update Config Status For Activities */\nIF ('@{activity('GetDateFilterValuesForActivities').output.firstRow.FilterType}'='History')\nBEGIN\n\tUPDATE Mtd.MarketoFilterConfig\n\t   SET ActivityImportStatus=1\n\t      ,ActivityImportDate=GETDATE()\n\t WHERE MFC_Id=@{activity('GetDateFilterValuesForActivities').output.firstRow.MFC_ID}\nEND \n\n/* Update Program Status */\n\nIF ('@{activity('GetDateFilterValuesForPrograms').output.firstRow.FilterType}'='History')\nBEGIN\n\tUPDATE Mtd.MarketoFilterConfigForPrograms\n\t   SET ImportStatus=1\n\t      ,ImportDate=GETDATE()\n\t WHERE MFCP_Id=@{activity('GetDateFilterValuesForPrograms').output.firstRow.MFCP_ID}\nEND \n\n/* Update Program Members Export Status */\n\nUPDATE ASData_PL.MarketoPrograms\n\t   SET LeadProgramImportStatus=1\n\t      ,LeadProgramImportDate=GETDATE()\n\t WHERE ProgramId=@{activity('GetProgramFilterValues').output.firstRow.ProgramId}\n\nSELECT 1\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ExecuteImportCampaignDataToDataMart_2_History",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetProgramFilterValues",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportCampaignDataToDataMart_2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								},
								"FilterStartDate": {
									"value": "@activity('GetDateFilterValuesForLeads').output.firstRow.StartDateFilter",
									"type": "Expression"
								},
								"FilterEndDate": {
									"value": "@activity('GetDateFilterValuesForLeads').output.firstRow.EndDateFilter",
									"type": "Expression"
								},
								"ProgramId": {
									"value": "@activity('GetProgramFilterValues').output.firstRow.ProgramId",
									"type": "Expression"
								},
								"FilterParameter": "createdAt",
								"ActivityFilterStartDate": {
									"value": "@activity('GetDateFilterValuesForActivities').output.firstRow.StartDateFilter",
									"type": "Expression"
								},
								"ActivityFilterEndDate": {
									"value": "@activity('GetDateFilterValuesForActivities').output.firstRow.EndDateFilter",
									"type": "Expression"
								},
								"ProgramName": {
									"value": "@activity('GetProgramFilterValues').output.firstRow.ProgramName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetDateFilterValuesForActivities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetDateFilterValuesForLeads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "IF EXISTS (SELECT * FROM Mtd.MarketoFilterConfig WHERE ISNULL(ActivityImportStatus,0)=0)\n  BEGIN\n  SELECT MFC_ID,StartDateFilter,EndDateFilter,'History' as FilterType\n  FROM Mtd.MarketoFilterConfig\n  WHERE MFC_Id IN (\n  SELECT min(mfc_id)\n    FROM Mtd.MarketoFilterConfig\n   WHERE Isnull(ActivityImportStatus,0)=0)\n   END\n   ELSE \n   BEGIN\n   select -1 as MFC_ID\n         ,convert(varchar,cast(getdate()-1 as date))+'T00:00:00Z' as StartDateFilter\n\t\t ,convert(varchar,cast(getdate() as date))+'T00:00:00Z' as EndDateFilter\n\t\t ,'Latest' as FilterType\n   END",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetDateFilterValuesForPrograms",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfCampaignImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "IF EXISTS (SELECT * FROM Mtd.MarketoFilterConfigForPrograms WHERE ISNULL(ImportStatus,0)=0)\n  BEGIN\n  SELECT MFCP_ID,StartDateFilter,EndDateFilter,'History' as FilterType\n  FROM Mtd.MarketoFilterConfigForPrograms\n  WHERE MFCP_Id IN (\n  SELECT min(mfcp_id)\n    FROM Mtd.MarketoFilterConfigForPrograms\n   WHERE Isnull(ImportStatus,0)=0)\n   END\n   ELSE \n   BEGIN\n   select -1 as MFCP_ID\n         ,convert(varchar,cast(getdate()-1 as date))+'T00:00:00Z' as StartDateFilter\n\t\t ,convert(varchar,cast(getdate() as date))+'T00:00:00Z' as EndDateFilter\n\t\t ,'Latest' as FilterType\n   END",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master-ImportVacanciesToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportRAAToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportRAAToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"MaxConcurrentConnections": "4",
								"DIU": "4",
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteImportAvmsToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportRAAToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAvmsToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "CompleteLogging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "BuildPresentationLayerForVacancies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "BuildPresentationLayerForVacancies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteImportFAAToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.06:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[BuildVacanciesPresentationLayer]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@activity('GetRunId').output.firstRow.RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportAvmsCandidateToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportAvmsToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAvmsCandidateToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteImportFAACandidateToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportAvmsCandidateToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFAACandidateToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteImportFAAToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportFAACandidateToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFAAToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"MaxConcurrentConnections": "4",
								"DIU": "4",
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ImportRAAToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-EmployerFeedback')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trigger Employer Feedback",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ImportPFBEToDataMart",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2021-04-06T11:12:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								23
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ImportPFBEToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-GenerateKey')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Generate Key Trigger ",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "AppsCampaignGenerateKey",
							"type": "PipelineReference"
						},
						"parameters": {
							"RunId": "[parameters('Trigger-GenerateKey_properties_AppsCampaignGenerateKey_parameters_RunId')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-08-27T15:44:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								7
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-ImportGAData')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ImportGAData",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-10-20T15:10:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								22
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ImportGAData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-ImportIncentives')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ImportIncentivesToDataMart",
							"type": "PipelineReference"
						},
						"parameters": {
							"RunId": "[parameters('Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_RunId')]",
							"MaxConcurrentConnections": "[parameters('Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_MaxConcurrentConnections')]",
							"DIU": "[parameters('Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_DIU')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-08-25T15:24:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ImportIncentivesToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-ProcessTPRFiles')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ProcessTPRFiles",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-11-23T11:35:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0,
								15,
								30,
								45
							],
							"hours": [
								10,
								11,
								12,
								13,
								14,
								15,
								16
							],
							"weekDays": [
								"Thursday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ProcessTPRFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-BuildDataMart')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Master-ImportVacanciesToDataMart",
							"type": "PipelineReference"
						},
						"parameters": {
							"RunId": "[parameters('Trigger-BuildDataMart_properties_Master-ImportVacanciesToDataMart_parameters_RunId')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-04-14T10:08:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Master-ImportVacanciesToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-ImportAccUsersComFinResvToDM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Master-ImportAccUsersComtFinResvToDataMart",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-09-09T23:25:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Master-ImportAccUsersComtFinResvToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-ImportMarketoToDataMart')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Master-ImportCampaignDataToDataMart",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-10-07T21:51:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								35
							],
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Master-ImportCampaignDataToDataMart')]"
			]
		}
	]
}