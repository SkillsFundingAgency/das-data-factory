{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "das-at-dfac-df"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://das-at-dfac-kv.vault.azure.net/"
		},
		"appred_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "appred-dbconnectionstring"
		},
		"avmsplus_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "avmsplus-dbconnectionstring"
		},
		"comt_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "comt-dbconnectionstring"
		},
		"datamgmt_staging_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "datamgmt-staging-dbconnectionstring"
		},
		"eas_acc_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "eas-acc-dbconnectionstring"
		},
		"eas_fin_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "eas-fin-dbconnectionstring"
		},
		"empinc_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "empinc-dbconnectionstring"
		},
		"faa_cdbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "faa-cdbconnectionstring"
		},
		"faa_cdbconnectionstring_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "findapprenticeship"
		},
		"marketo_httpservice_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().MarketoBaseUrl}"
		},
		"marketo_restservice_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().MarketoBaseUrl}"
		},
		"rcrt_cdbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "rcrt-cdbconnectionstring"
		},
		"rcrt_cdbconnectionstring_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "recruit"
		},
		"rsrv_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "rsrv-dbconnectionstring"
		},
		"users_dbconnectionstring_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "users-dbconnectionstring"
		},
		"Trigger-BuildDataMart_properties_Master-ImportVacanciesToDataMart_parameters_RunId": {
			"type": "string",
			"defaultValue": "\"1\""
		},
		"Trigger-GenerateKey_properties_AppsCampaignGenerateKey_parameters_RunId": {
			"type": "string",
			"defaultValue": "1"
		},
		"Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_RunId": {
			"type": "string",
			"defaultValue": "1"
		},
		"Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_MaxConcurrentConnections": {
			"type": "int",
			"defaultValue": 4
		},
		"Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_DIU": {
			"type": "int",
			"defaultValue": 4
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AppsCampaignGenerateKey')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Apprenticeship Campaign Key",
				"activities": [
					{
						"name": "GenerateRunID",
						"description": "Generate Run ID\n",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GenerateKey",
						"description": "Generate Key",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SaltKeyLogging]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@{activity('GetRunId').output.firstRow.RunId}",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"SourceType": {
									"value": "CampaignDashboard",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetRunId",
						"description": "Get Run ID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "CompleteLogging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportAccountsToDM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name,PLTableName as PLTableName FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='Accounts' and IsEnabled=1 and FullCopyToPL=1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceTableInUser",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfImportToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcAccounts",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Account",
												"SchemaName": "Employer_Account"
											}
										}
									}
								},
								{
									"name": "GetImportSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVariableAK2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\n\n\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\n\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='Accounts'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('AK1')}'),'K2','0x'+'@{variables('AK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2) as ConfigList\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='Accounts'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                   from STRING_SPLIT(@cols, ',') Cols \n\t     \t      where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\n \n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColumnList",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetSourceColumnListToVariable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "Accounts",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportAccountsToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "CopyData",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetImportSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowAccounts",
											"type": "DataFlowReference",
											"parameters": {
												"SourceQuery": {
													"value": "'@{activity('GetImportSelectQuery').output.firstRow.SourceQuery}'",
													"type": "Expression"
												},
												"ColumnList": {
													"value": "'@{activity('GetImportSelectQuery').output.firstRow.ColumnList}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"TableName": "Users",
													"SchemaName": "dbo"
												},
												"sink1": {
													"TableName": "Acc_@{item().TABLE_NAME}",
													"SchemaName": "Stg"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "AzureIntegrationRunTime",
											"type": "IntegrationRuntimeReference"
										}
									}
								},
								{
									"name": "PresentationLayerFullRefresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('AK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('AK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "AsData_PL.@{item().PLTABLENAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "Accounts",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.Acc_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogStartOfImportToStaging",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportAccountsToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportAccountsToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GenerateAK1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @k1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GenerateAK2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GenerateAK1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVariableAK1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GenerateAK2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "AK1",
										"value": {
											"value": "@{activity('GenerateAK1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVariableAK2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVariableAK1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "AK2",
										"value": {
											"value": "@{activity('GenerateAK2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportAccountsToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachSourceTableInUser",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportAccountsToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@{pipeline().parameters.RunId}",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"AK1": {
						"type": "String"
					},
					"AK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/datasets/SrcAccounts')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/dataflows/DataFlowAccounts')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportAppRedundancyToDM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name,PLTableName as PLTableName FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='AppRedundancy' and IsEnabled=1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceTableInUser",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfImportToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcAppRedundancy",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "Employer"
											}
										}
									}
								},
								{
									"name": "GetImportSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVariableAK2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\n\n\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\n\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='AppRedundancy'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('AK1')}'),'K2','0x'+'@{variables('AK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2) as ConfigList\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='AppRedundancy'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                   from STRING_SPLIT(@cols, ',') Cols \n\t     \t      where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\n \n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColumnList",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetSourceColumnListToVariable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "AppRedundancy",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportAppRedundancyToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "CopyData",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetImportSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowAppRedundancy",
											"type": "DataFlowReference",
											"parameters": {
												"SourceQuery": {
													"value": "'@{activity('GetImportSelectQuery').output.firstRow.SourceQuery}'",
													"type": "Expression"
												},
												"ColumnList": {
													"value": "'@{activity('GetImportSelectQuery').output.firstRow.ColumnList}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"SchemaName": "dbo",
													"TableName": "Users"
												},
												"sink1": {
													"TableName": "AR_@{item().TABLE_NAME}",
													"SchemaName": "Stg"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "AzureIntegrationRunTime",
											"type": "IntegrationRuntimeReference"
										}
									}
								},
								{
									"name": "PresentationLayerFullRefresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('AK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('AK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "AsData_PL.@{item().PLTABLENAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "AppRedundancy",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.AR_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogStartOfImportToStaging",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportAppRedundancyToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportAppRedundancyToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GenerateAK1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @k1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GenerateAK2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GenerateAK1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVariableAK1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GenerateAK2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "AK1",
										"value": {
											"value": "@{activity('GenerateAK1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVariableAK2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVariableAK1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "AK2",
										"value": {
											"value": "@{activity('GenerateAK2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportAppRedundancyToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachSourceTableInUser",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportAppRedundancyToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@{pipeline().parameters.RunId}",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"AK1": {
						"type": "String"
					},
					"AK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/datasets/SrcAppRedundancy')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/dataflows/DataFlowAppRedundancy')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportAvmsCandidateToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "DELETE FROM Stg.Avms_CandidateDetails\n\nSELECT ShortCode\n  FROM Stg.CandidateConfig\nWHERE SourceDb='RAAv1'\n    AND Category='Ethnicity'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ImportCandidateToDataMart",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GenerateCopyActvity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "CAID",
													"value": {
														"value": "@activity('GenerateCopyActvity').output.firstRow.CAID\n",
														"type": "Expression"
													}
												},
												{
													"name": "RunID",
													"value": {
														"value": "@pipeline().parameters.RunId",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "Select CandidateId\nFrom dbo.Candidate\nWhere EthnicOrigin=@{item().ShortCode}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "CandidateId",
														"type": "Int32"
													},
													"sink": {
														"name": "CandidateId",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CAID"
													},
													"sink": {
														"name": "EID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RunID"
													},
													"sink": {
														"name": "RunId",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "SrcAvmsPlus",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Candidate",
												"SchemaName": "dbo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Avms_CandidateDetails",
												"SchemaName": "Stg"
											}
										}
									]
								},
								{
									"name": "GenerateCopyActvity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @CAID BIGINT\n\nEXECUTE @CAID= [dbo].[GenerateCopyActivityId] @{pipeline().parameters.RunId}, 'RAAv1','Eth'\n\nSELECT @CAID as CAID",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ImportCandidateToDataMart",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('ImportCandidateToDataMart').output.Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{pipeline().parameters.RunId}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportAVMSCandidateEthToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GenerateConfig",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateConfig]",
							"storedProcedureParameters": {
								"Category": {
									"value": "Ethnicity",
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@pipeline().parameters.RunId",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SourceDb": {
									"value": "RAAv1",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{pipeline().parameters.RunId}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportAVMSCandidateEthToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportAVMSCandidateEthToDM'\n     AND RunId=@{pipeline().parameters.RunId}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{pipeline().parameters.RunId}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/datasets/SrcAvmsPlus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportAvmsToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRAAv1TableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='AVMSPlus' and IsEnabled=1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetRAAv1TableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetRAAv1TableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetSourceColumnList",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcAvmsPlus",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Vacancy",
												"SchemaName": "dbo"
											}
										}
									}
								},
								{
									"name": "GetImportSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\n\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\n\n\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='AvmsPlus'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}'\n\t) AS SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\t\t\t\t\t  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n/* Apply Transformations */\nSET @collist= \nREPLACE(\nREPLACE(\nREPLACE(\nREPLACE(\n@COLLIST\n,'[DATEOFBIRTH]',\n'(DATEDIFF(YEAR,[DateOfBirth],GETDATE())-(CASE WHEN DATEADD(YY,DATEDIFF(YEAR,[DateOfBirth],GETDATE()),[DateOfBirth]) > GETDATE() THEN 1 ELSE 0 END)) as [Age]'\n)\n,'[Postcode]'\n,'(LEFT([postcode], CASE WHEN CHARINDEX('' '', [postcode]) = 0 THEN LEN([postcode]) ELSE CHARINDEX('' '', [postcode])-1 END)) as [PostCode]'\n)\n,'[EthnicOrigin]'\n,'(@{pipeline().parameters.RunId}+EthnicOrigin) as EID'\n)\n,'[CandidateEthnicOriginId]'\n,'(@{pipeline().parameters.RunId}+CandidateEthnicOriginId) as EID'\n)\n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "CopyAvmsTablesToStagingArea",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GetImportSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@{activity('GetImportSelectQuery').output.firstRow.SourceQuery}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'avms_@{item().TABLE_NAME}' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[avms_@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"maxConcurrentConnections": {
												"value": "@pipeline().parameters.MaxConcurrentConnections",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.DIU",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SrcAvmsPlus",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Vacancy",
												"SchemaName": "dbo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Avms_@{item().TABLE_NAME}",
												"SchemaName": "Stg"
											}
										}
									]
								},
								{
									"name": "GetSourceColumnListToVariable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "AvmsPlus",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyAvmsTablesToStagingArea",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyAvmsTablesToStagingArea').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{pipeline().parameters.RunId}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportAvmsToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{pipeline().parameters.RunId}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportAvmsToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachSourceTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportAvmsToDM'\n     AND RunId=@{pipeline().parameters.RunId}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{pipeline().parameters.RunId}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/datasets/SrcAvmsPlus')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportCampaignDataToDataMart_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetActivityTypeIds",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetAccessTokenForActivityIds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MarketoActivityTypes' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[MarketoActivityTypes]\n\n/* Start Logging */\nINSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'  ,'ImportMarketoActivityTypeIdsToDMStaging'\n\t   ,getdate()\n\t   ,0\n",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['description']"
										},
										"sink": {
											"name": "description"
										}
									}
								],
								"collectionReference": "$['result']"
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRestMarketo",
								"type": "DatasetReference",
								"parameters": {
									"RelativePath": {
										"value": "/rest/v1/activities/types.json?access_token=@{activity('GetAccessTokenForActivityIds').output.access_token}",
										"type": "Expression"
									},
									"MarketoBaseUrl": {
										"value": "@variables('BaseUrl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "MarketoActivityTypes",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "GetAccessTokenForActivityIds",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetKey",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/identity/oauth/token?grant_type=client_credentials&client_id=@{variables('Name')}&client_secret=@{variables('Key')}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "GetAccessTokenForProgramTypesNames",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetKey",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/identity/oauth/token?grant_type=client_credentials&client_id=@{variables('Name')}&client_secret=@{variables('Key')}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "GetProgramNames",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetAccessTokenForProgramTypesNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MarketoPrograms' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[MarketoPrograms]\n\n\n/* Start Logging */\nINSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'  ,'ImportMarketoProgramsToDMStaging'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['description']"
										},
										"sink": {
											"name": "description"
										}
									},
									{
										"source": {
											"path": "[['createdAt']"
										},
										"sink": {
											"name": "createdAt"
										}
									},
									{
										"source": {
											"path": "[['updatedAt']"
										},
										"sink": {
											"name": "updatedAt"
										}
									},
									{
										"source": {
											"path": "[['url']"
										},
										"sink": {
											"name": "url"
										}
									},
									{
										"source": {
											"path": "[['type']"
										},
										"sink": {
											"name": "type"
										}
									},
									{
										"source": {
											"path": "[['channel']"
										},
										"sink": {
											"name": "channel"
										}
									}
								],
								"collectionReference": "$['result']"
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRestMarketo",
								"type": "DatasetReference",
								"parameters": {
									"RelativePath": {
										"value": "/rest/asset/v1/programs.json?access_token=@{activity('GetAccessTokenForProgramTypesNames').output.access_token}",
										"type": "Expression"
									},
									"MarketoBaseUrl": {
										"value": "@variables('BaseUrl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "MarketoPrograms",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "GetVaultUrl",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT CASE WHEN '@{pipeline().DataFactory}'='das-at-dfac-df'\n                      THEN 'das-at-dfac-kv.vault.azure.net'\n                      WHEN '@{pipeline().DataFactory}'='das-test-dfac-df'\n                      THEN 'das-test-dfac-kv.vault.azure.net'\n                      WHEN '@{pipeline().DataFactory}'='das-pp-dfac-df'\n                      THEN 'das-pp-dfac-kv.vault.azure.net'\n                     WHEN '@{pipeline().DataFactory}'='das-prd-dfac-df'\n                      THEN 'das-prd-dfac-kv.vault.azure.net'\n                      ELSE 'Unknown'\n           END VaultUrl\n                ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "SetVaultUrl",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetVaultUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "VaultUrl",
							"value": {
								"value": "@activity('GetVaultUrl').output.firstRow.VaultUrl",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetBaseUrl",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetVaultUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{variables('VaultUrl')}/secrets/marketo-baseurl?api-version=7.0",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SetBaseUrl",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetBaseUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BaseUrl",
							"value": {
								"value": "@activity('GetBaseUrl').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetUserName",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetBaseUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{variables('VaultUrl')}/secrets/marketo-clientid?api-version=7.0",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SetUserName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetUserName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Name",
							"value": {
								"value": "@activity('GetUserName').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetKey",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetUserName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{variables('VaultUrl')}/secrets/marketo-clientsecret?api-version=7.0",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SetKey",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Key",
							"value": {
								"value": "@activity('GetKey').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LogSuccessfulActivityTypeCopy",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetActivityTypeIds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportMarketoActivityTypeIdsToDMStaging'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulProgramNamesCopy",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetProgramNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportMarketoProgramsToDMStaging'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogProgramNamesCopyError",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetProgramNames",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[InsertLogErrorDetails]",
								"storedProcedureParameters": {
									"ErrorMessage": {
										"type": "String",
										"value": {
											"value": "@{activity('GetProgramNames').Error.message}\n",
											"type": "Expression"
										}
									},
									"RunId": {
										"type": "Int32",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									},
									"TaskType": {
										"type": "String",
										"value": "ImportMarketoProgramsToDMStaging"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogErrorActivityTypeIdsCopyError",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetActivityTypeIds",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[InsertLogErrorDetails]",
								"storedProcedureParameters": {
									"ErrorMessage": {
										"type": "String",
										"value": {
											"value": "@{activity('GetActivityTypeIds').Error.message}",
											"type": "Expression"
										}
									},
									"RunId": {
										"type": "Int32",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									},
									"TaskType": {
										"type": "String",
										"value": "ImportMarketoActivityTypeIdsToDMStaging"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetCampaigns",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetProgramNames",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MarketoCampaigns' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[MarketoCampaigns]\n\n\n/* Start Logging */\nINSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'  ,'ImportMarketoCampaignsToDMStaging'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['requestId']"
										},
										"sink": {
											"name": "requestId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['type']"
										},
										"sink": {
											"name": "type"
										}
									},
									{
										"source": {
											"path": "[['programName']"
										},
										"sink": {
											"name": "programName"
										}
									},
									{
										"source": {
											"path": "[['programId']"
										},
										"sink": {
											"name": "programId"
										}
									},
									{
										"source": {
											"path": "[['workspaceName']"
										},
										"sink": {
											"name": "workspaceName"
										}
									},
									{
										"source": {
											"path": "[['createdAt']"
										},
										"sink": {
											"name": "createdAt"
										}
									},
									{
										"source": {
											"path": "[['updatedAt']"
										},
										"sink": {
											"name": "updatedAt"
										}
									},
									{
										"source": {
											"path": "[['active']"
										},
										"sink": {
											"name": "active"
										}
									}
								],
								"collectionReference": "$['result']"
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRestMarketo",
								"type": "DatasetReference",
								"parameters": {
									"RelativePath": {
										"value": "/rest/v1/campaigns.json?access_token=@{activity('GetAccessTokenForProgramTypesNames').output.access_token}",
										"type": "Expression"
									},
									"MarketoBaseUrl": {
										"value": "@variables('BaseUrl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "MarketoCampaigns",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogSuccessfulCampaignCopy",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetCampaigns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportMarketoCampaignsToDMStaging'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogCampaignsCopyError",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetCampaigns",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[InsertLogErrorDetails]",
								"storedProcedureParameters": {
									"ErrorMessage": {
										"type": "String",
										"value": {
											"value": "@{activity('GetCampaigns').Error.message}\n",
											"type": "Expression"
										}
									},
									"RunId": {
										"type": "Int32",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									},
									"TaskType": {
										"type": "String",
										"value": "ImportCampaignsToDMStaging"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string"
					}
				},
				"variables": {
					"VaultUrl": {
						"type": "String"
					},
					"BaseUrl": {
						"type": "String"
					},
					"Name": {
						"type": "String"
					},
					"Key": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcRestMarketo')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportCampaignDataToDataMart_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetAccessToken",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CopyLeadPrograms",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/identity/oauth/token?grant_type=client_credentials&client_id=@{variables('Name')}&client_secret=@{variables('Key')}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "CreateLeadsExtractJob",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetAccessToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/bulk/v1/leads/export/create.json?access_token=@{activity('GetAccessToken').output.access_token}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "'bearer '+@{activity('GetAccessToken').output.access_token}",
									"type": "Expression"
								}
							},
							"body": {
								"value": "{\"fields\":[\"firstName\",\"lastName\",\"id\",\"email\",\"createdAt\",\"updatedAt\"],\"format\":\"TSV\",\"columnHeaderNames\":{\"firstName\":\"FirstName\",\"lastName\":\"LastName\",\"id\":\"LeadId\",\"email\":\"EmailAddress\",\"createdAt\":\"CreatedAt\",\"updatedAt\":\"UpdatedAt\"},\"filter\":{\"@{pipeline().parameters.FilterParameter}\":{\"startAt\":\"@{pipeline().parameters.FilterStartDate}\",\"endAt\":\"@{pipeline().parameters.FilterEndDate}\"}}}}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartExportJob",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CreateLeadsExtractJob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/bulk/v1/leads/export/@{activity('CreateLeadsExtractJob').output.result[0].exportId}/enqueue.json?access_token=@{activity('GetAccessToken').output.access_token}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": "v1"
						}
					},
					{
						"name": "Wait5MinForJobToComplete",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "StartExportJob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 300
						}
					},
					{
						"name": "CopyLeads",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait5MinForJobToComplete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MarketoLeads' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[MarketoLeads]\n\n/*Start Logging */\n\nINSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'  ,'ImportMarketoLeadsToDMStaging'\n\t   ,getdate()\n\t   ,0\n\n",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SrcHttpMarketo",
								"type": "DatasetReference",
								"parameters": {
									"RelativePath": {
										"value": "/bulk/v1/leads/export/@{activity('CreateLeadsExtractJob').output.result[0].exportId}/file.json?access_token=@{activity('GetAccessToken').output.access_token}",
										"type": "Expression"
									},
									"MarketoBaseUrl": {
										"value": "@variables('BaseUrl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "MarketoLeads",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "GetAccessTokenForActivities",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CopyLeads",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/identity/oauth/token?grant_type=client_credentials&client_id=@{variables('Name')}&client_secret=@{variables('Key')}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "CreateActivitiesExtractJob",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetAccessTokenForActivities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/bulk/v1/activities/export/create.json?access_token=@{activity('GetAccessTokenForActivities').output.access_token}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "'bearer '+@{activity('GetAccessTokenForActivities').output.access_token}",
									"type": "Expression"
								}
							},
							"body": {
								"value": "{\"fields\":[\"marketoGUID\",\"leadId\",\"activityDate\",\"activityTypeId\",\"campaignId\",\"primaryAttributeValueId\",\"primaryAttributeValue\",\"attributes\"],\"format\":\"TSV\",\"columnHeaderNames\":{\"marketoGUID\":\"MarketoGUID\",\"leadId\":\"LeadId\",\"activityDate\":\"ActivityDate\",\"activityTypeId\":\"ActivityTypeId\",\"campaignId\":\"CampaignId\",\"primaryAttributeValueId\":\"PrimaryAttributeValueId\",\"primaryAttributeValue\":\"primaryAttributeValue\",\"attributes\":\"Attributes\"},\"filter\":{\"@{pipeline().parameters.FilterParameter}\":{\"startAt\":\"@{pipeline().parameters.FilterStartDate}\",\"endAt\":\"@{pipeline().parameters.FilterStartDate}\"}}}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartExportJobForActivities",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CreateActivitiesExtractJob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/bulk/v1/activities/export/@{activity('CreateActivitiesExtractJob').output.result[0].exportId}/enqueue.json?access_token=@{activity('GetAccessTokenForActivities').output.access_token}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": "v1"
						}
					},
					{
						"name": "Wait5MinForActivitiesJobToComplete",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "StartExportJobForActivities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 300
						}
					},
					{
						"name": "CopyActivities",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait5MinForActivitiesJobToComplete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MarketoLeadActivities' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[MarketoLeadActivities]\n\n\n/* Start Logging */\nINSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'  ,'ImportMarketoLeadActivitiesToDMStaging'\n\t   ,getdate()\n\t   ,0\n\n\n",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SrcHttpMarketo",
								"type": "DatasetReference",
								"parameters": {
									"RelativePath": {
										"value": "/bulk/v1/activities/export/@{activity('CreateActivitiesExtractJob').output.result[0].exportId}/file.json?access_token=@{activity('GetAccessTokenForActivities').output.access_token}",
										"type": "Expression"
									},
									"MarketoBaseUrl": {
										"value": "@variables('BaseUrl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "MarketoLeadActivities",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "CreateProgramsExtractJob",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetAccessTokenForPrograms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/bulk/v1/program/members/export/create.json?access_token=@{activity('GetAccessTokenForPrograms').output.access_token}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "'bearer '+@{activity('GetAccessTokenForPrograms').output.access_token}",
									"type": "Expression"
								}
							},
							"body": {
								"value": "{\"format\":\"TSV\",\"fields\":[\"Id\",\"firstName\",\"lastName\",\"email\",\"Member Date\",\"Program\",\"Program Id\",\"Status\",\"Status Id\",\"Lead Id\",\"Program Type Id\",\"Success\",\"createdAt\",\"updatedAt\"],\"columnHeaderNames\":{\"Id\":\"Id\",\"firstName\":\"FirstName\",\"email\":\"Email\",\"Member Date\":\"MemberDate\",\"Program\":\"Program\",\"Program Id\":\"ProgramId\",\"Status\":\"Status\",\"Status Id\":\"StatusId\",\"Lead Id\":\"LeadId\",\"Program Type Id\":\"ProgramTypeId\",\"Success\":\"Success\",\"createdAt\":\"CreatedAt\",\"updatedAt\":\"UpdatedAt\"},\"filter\":{\"programId\":@{pipeline().parameters.ProgramId}}}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartExportJobForPrograms",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CreateProgramsExtractJob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/bulk/v1/program/members/export/@{activity('CreateProgramsExtractJob').output.result[0].exportId}/enqueue.json?access_token=@{activity('GetAccessTokenForPrograms').output.access_token}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": "v1"
						}
					},
					{
						"name": "Wait5MinForActivitiesJobToComplete_copy1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "StartExportJobForPrograms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 300
						}
					},
					{
						"name": "CopyLeadPrograms",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait5MinForActivitiesJobToComplete_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MarketoLeadPrograms' AND TABLE_SCHEMA=N'Stg') DROP TABLE [Stg].[MarketoLeadPrograms]\n\n/* Start Logging */\n\n\n/* Start Logging */\nINSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'  ,'ImportMarketoLeadProgramsToDMStaging'\n\t   ,getdate()\n\t   ,0\n",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SrcHttpMarketo",
								"type": "DatasetReference",
								"parameters": {
									"RelativePath": {
										"value": "/bulk/v1/program/members/export/@{activity('CreateProgramsExtractJob').output.result[0].exportId}/file.json?access_token=@{activity('GetAccessTokenForPrograms').output.access_token}",
										"type": "Expression"
									},
									"MarketoBaseUrl": {
										"value": "@variables('BaseUrl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "MarketoLeadPrograms",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "GetVaultUrl",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT CASE WHEN '@{pipeline().DataFactory}'='das-at-dfac-df'\n                      THEN 'das-at-dfac-kv.vault.azure.net'\n                      WHEN '@{pipeline().DataFactory}'='das-test-dfac-df'\n                      THEN 'das-test-dfac-kv.vault.azure.net'\n                      WHEN '@{pipeline().DataFactory}'='das-pp-dfac-df'\n                      THEN 'das-pp-dfac-kv.vault.azure.net'\n                     WHEN '@{pipeline().DataFactory}'='das-prd-dfac-df'\n                      THEN 'das-prd-dfac-kv.vault.azure.net'\n                      ELSE 'Unknown'\n           END VaultUrl\n                ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "SetVaultUrl",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetVaultUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "VaultUrl",
							"value": {
								"value": "@activity('GetVaultUrl').output.firstRow.VaultUrl",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetBaseUrl",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetVaultUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{variables('VaultUrl')}/secrets/marketo-baseurl?api-version=7.0",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SetBaseUrl",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetBaseUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BaseUrl",
							"value": {
								"value": "@activity('GetBaseUrl').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetUserName",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetBaseUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{variables('VaultUrl')}/secrets/marketo-clientid?api-version=7.0",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SetUserName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetUserName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Name",
							"value": {
								"value": "@activity('GetUserName').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetKey",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetUserName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{variables('VaultUrl')}/secrets/marketo-clientsecret?api-version=7.0",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SetKey",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Key",
							"value": {
								"value": "@activity('GetKey').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LogSuccessfulLeadProgramsCopy",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyLeadPrograms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportMarketoLeadProgramsToDMStaging'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulLeadsCopy",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyLeads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportMarketoLeadsToDMStaging'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulActivitiesCopy",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportMarketoLeadActivitiesToDMStaging'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogErrorCopyLeadPrograms",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyLeadPrograms",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[InsertLogErrorDetails]",
								"storedProcedureParameters": {
									"ErrorMessage": {
										"type": "String",
										"value": {
											"value": "@{activity('CopyLeadPrograms').Error.message}",
											"type": "Expression"
										}
									},
									"RunId": {
										"type": "Int32",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									},
									"TaskType": {
										"type": "String",
										"value": "ImportMarketoLeadProgramsToDMStaging"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogErrorCopyLeads",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyLeads",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[InsertLogErrorDetails]",
								"storedProcedureParameters": {
									"ErrorMessage": {
										"type": "String",
										"value": {
											"value": "@{activity('CopyLeads').Error.message}",
											"type": "Expression"
										}
									},
									"RunId": {
										"type": "Int32",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									},
									"TaskType": {
										"type": "String",
										"value": {
											"value": "ImportMarketoLeadsToDMStaging",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogErrorCopyActivities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivities",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[InsertLogErrorDetails]",
								"storedProcedureParameters": {
									"ErrorMessage": {
										"type": "String",
										"value": {
											"value": "@{activity('CopyActivities').Error.message}",
											"type": "Expression"
										}
									},
									"RunId": {
										"type": "Int32",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									},
									"TaskType": {
										"type": "String",
										"value": "ImportMarketoLeadActivitiesToDMStaging"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetAccessTokenForPrograms",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('BaseUrl')}/identity/oauth/token?grant_type=client_credentials&client_id=@{variables('Name')}&client_secret=@{variables('Key')}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string"
					},
					"FilterStartDate": {
						"type": "string"
					},
					"FilterEndDate": {
						"type": "string"
					},
					"ProgramId": {
						"type": "string"
					},
					"FilterParameter": {
						"type": "string"
					}
				},
				"variables": {
					"VaultUrl": {
						"type": "String"
					},
					"BaseUrl": {
						"type": "String"
					},
					"Name": {
						"type": "String"
					},
					"Key": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/datasets/SrcHttpMarketo')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportCommitmentToDM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Import Commitments to datamart",
				"activities": [
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportCommitmentToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "For Each Commitment Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportCommitmentToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetComtTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name,PLTableName as PLTableName \nFROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='Commitments' and IsEnabled=1 and FullCopyToPL=1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Commitment Table",
						"description": "For Each Commitment Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetComtTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetComtTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LogStartOfCommitImportToDatamart",
									"description": "Log Start of Import to Datamart",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportCommitmentToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetCommitSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfCommitImportToDatamart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcComts",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetCommitSourceColumnListToVariable",
									"description": "Get Commit Source Column List to Variable ",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetCommitSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetCommitSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogCommitSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetCommitSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "Commitments",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "GetImportCommitSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVar_ComtKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='Commitments'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\tUNION\n\tSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('CK1')}'),'K2','0x'+'@{variables('CK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2) as ConfigList\n\t   from (SELECT value as ConfigList\n\t   FROM Mtd.SourceConfigForImport SCFI\n\t  CROSS APPLY string_split(ColumnNamesToMask,',')\n\t  WHERE SourceDatabaseName='Commitments'\n\t\tAND SourceTableName='@{item().TABLE_NAME}'\n\t\tAND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n\t  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n\t\t\t\t\t   from STRING_SPLIT(@cols, ',') Cols \n\t     \t\t\t  where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value))\t\n\t\t\t\t\t  )\n\tUNION \n\tSELECT ConfigList\n\t   from (   \n\t\t   SELECT '(DATEDIFF(hour,DateOfBirth,GETDATE())/8766) [Age]'  ConfigList\n\t\t   FROM Mtd.SourceConfigForImport SCFI\n\t\t  CROSS APPLY string_split(ColumnNamesToMask,',')\n\t\t  WHERE SourceDatabaseName='Commitments'\n\t\t\tAND SourceTableName='@{item().TABLE_NAME}'\n\t\t\tAND SourceSchemaName='@{item().Schema_NAME}'\n\t\t\tAND CHARINDEX('DateOfBirth', lower(ltrim(rtrim(value)))) > 0 \n\t\t) SourceConfigInDM\n\t  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n\t\t\t\t\t  from STRING_SPLIT(@cols, ',') Cols \t\t\t\t  \t\t\t\t \t\t\t\t  \n\t\t\t\t  )\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColumnList",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "CopyCommitData",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetImportCommitSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowCommitment",
											"type": "DataFlowReference",
											"parameters": {
												"SourceQuery": {
													"value": "'@{activity('GetImportCommitSelectQuery').output.firstRow.SourceQuery}'",
													"type": "Expression"
												},
												"ColumnList": {
													"value": "'@{activity('GetImportCommitSelectQuery').output.firstRow.ColumnList}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"CommitSource": {},
												"CommitSink": {
													"TableName": "Comt_@{item().TABLE_NAME}",
													"SchemaName": "Stg"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "AzureIntegrationRunTime",
											"type": "IntegrationRuntimeReference"
										}
									}
								},
								{
									"name": "LogCommitSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyCommitData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportCommitmentToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogCommitError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyCommitData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyCommitData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportCommitmentToDatamart",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "CommitPresentationLayerFullRefresh",
									"description": "Presentation Layer Full Refresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogCommitSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('CK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('CK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "AsData_PL.@{item().PLTABLENAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "Commitments",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.Comt_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Generate_ComtKeys_1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogCommitSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "Generate_ComtKeys_2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Generate_ComtKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2\n\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVar_ComtKeys_1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Generate_ComtKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CK1",
										"value": {
											"value": "@{activity('Generate_ComtKeys_1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVar_ComtKeys_2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVar_ComtKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CK2",
										"value": {
											"value": "@{activity('Generate_ComtKeys_2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"CK1": {
						"type": "String"
					},
					"CK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/datasets/SrcComts')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/dataflows/DataFlowCommitment')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportFAACandidateToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "DELETE FROM Stg.FAA_CandidateDetails\n\nSELECT ShortCode\n FROM Stg.CandidateConfig\nWHERE SourceDb='RAAv2'\n    AND Category='Ethnicity'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GenerateConfig",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateConfig]",
							"storedProcedureParameters": {
								"Category": {
									"value": "Ethnicity",
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@pipeline().parameters.RunId",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SourceDb": {
									"value": "RAAv2",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ImportCandidateToDataMart",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GenerateCopyActvity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CosmosDbMongoDbApiSource",
											"additionalColumns": [
												{
													"name": "CAID",
													"value": {
														"value": "@activity('GenerateCopyActvity').output.firstRow.CAID\n",
														"type": "Expression"
													}
												},
												{
													"name": "RunID",
													"value": {
														"value": "@pipeline().parameters.RunId",
														"type": "Expression"
													}
												}
											],
											"batchSize": 100,
											"filter": {
												"value": "\n{\"MonitoringInformation.Ethnicity\":@{item().ShortCode}}\n",
												"type": "Expression"
											},
											"cursorMethods": {
												"project": "{\"_id\":1,\"LegacyCandidateId\":1}"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['_id']['$binary']"
													},
													"sink": {
														"name": "CandidateId",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['LegacyCandidateId']"
													},
													"sink": {
														"name": "LegacyCandidateId",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "$['CAID']"
													},
													"sink": {
														"name": "EID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "$['RunID']"
													},
													"sink": {
														"name": "RunID",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "SrcFAACosmos",
											"type": "DatasetReference",
											"parameters": {
												"CollectionName": "candidates"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "FAA_CandidateDetails",
												"SchemaName": "Stg"
											}
										}
									]
								},
								{
									"name": "GenerateCopyActvity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @CAID BIGINT\n\nEXECUTE @CAID= [dbo].[GenerateCopyActivityId] @{pipeline().parameters.RunId}, 'RAAv2','Eth'\n\nSELECT @CAID as CAID",
												"type": "Expression"
											},
											"queryTimeout": "01:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ImportCandidateToDataMart",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('ImportCandidateToDataMart').output.Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{pipeline().parameters.RunId}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportFAACandidateEthToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{pipeline().parameters.RunId}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportFAACandidateEthToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportFAACandidateEthToDM'\n     AND RunId=@{pipeline().parameters.RunId}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{pipeline().parameters.RunId}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/datasets/SrcFAACosmos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportFinanceToDM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Import Finance to datamart",
				"activities": [
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportFinanceToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetFinanceTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name,PLTableName as PLTableName \nFROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='Finance' and IsEnabled=1 and FullCopyToPL=1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Finance Source Table",
						"description": "For Each Finance Source Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFinanceTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFinanceTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LogStartOfFinanceImportToDatamart",
									"description": "Log Start of Finance Import to Datamart\n",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportFinanceToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetFinanceSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfFinanceImportToDatamart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcFinance",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetFinanceSourceColumnListToVariable",
									"description": "Get Source Column List to Variable ",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetFinanceSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetFinanceSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogFinanceSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetFinanceSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "Finance",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "GetImportFinanceSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVar_FinKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='Finance'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('FK1')}'),'K2','0x'+'@{variables('FK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2) as ConfigList\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='Finance'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                   from STRING_SPLIT(@cols, ',') Cols \n\t     \t      where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColumnList",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "CopyFinanceData",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetImportFinanceSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowFinance",
											"type": "DataFlowReference",
											"parameters": {
												"SourceQuery": {
													"value": "'@{activity('GetImportFinanceSelectQuery').output.firstRow.SourceQuery}'",
													"type": "Expression"
												},
												"ColumnList": {
													"value": "'@{activity('GetImportFinanceSelectQuery').output.firstRow.ColumnList}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Financesource": {},
												"FinanceSink": {
													"TableName": "Fin_@{item().TABLE_NAME}",
													"SchemaName": "Stg"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "AzureIntegrationRunTime",
											"type": "IntegrationRuntimeReference"
										}
									}
								},
								{
									"name": "LogFinanceSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyFinanceData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportFinanceToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogFinanceError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyFinanceData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyFinanceData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportFinanceToDatamart",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "FinancePresentationLayerFullRefresh",
									"description": "Presentation Layer Full Refresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogFinanceSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('FK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('FK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "AsData_PL.@{item().PLTABLENAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "Finance",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.Fin_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Generate_FinKeys_1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogFinanceSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @k1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "Generate_FinKeys_2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Generate_FinKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVar_FinKeys_1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Generate_FinKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FK1",
										"value": {
											"value": "@{activity('Generate_FinKeys_1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVar_FinKeys_2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVar_FinKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FK2",
										"value": {
											"value": "@{activity('Generate_FinKeys_2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "For Each Finance Source Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportFinanceToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"FK1": {
						"type": "String"
					},
					"FK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/datasets/SrcFinance')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/dataflows/DataFlowFinance')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportIncentivesToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetEmpIncTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='EmpInc' and IsEnabled=1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetEmpIncTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetEmpIncTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfImportToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcEmpIncentive",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Accounts",
												"SchemaName": "dbo"
											}
										}
									}
								},
								{
									"name": "GetImportSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\n\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\n\n\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='EmpInc'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}'\n\t) AS SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\t\t\t\t\t  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @Collist ColumnList\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetSourceColumnListToVariable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "EmpInc",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportAvmsToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "CopyData",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetImportSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowIncentives",
											"type": "DataFlowReference",
											"parameters": {
												"SourceQuery": {
													"value": "'@{activity('GetImportSelectQuery').output.firstRow.SourceQuery}'",
													"type": "Expression"
												},
												"ColumnList": {
													"value": "'@{activity('GetImportSelectQuery').output.firstRow.ColumnList}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"TableName": "Accounts",
													"SchemaName": "dbo"
												},
												"sink1": {
													"TableName": "EI_@{item().TABLE_NAME}",
													"SchemaName": "Stg"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "AzureIntegrationRunTime",
											"type": "IntegrationRuntimeReference"
										}
									}
								},
								{
									"name": "PresentationLayerFullRefresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": {
													"value": "@activity('GetImportSelectQuery').output.firstRow.ColumnList",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": null,
												"type": "String"
											},
											"K2": {
												"value": null,
												"type": "String"
											},
											"KeyBased": {
												"value": "0",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "ASData_PL.EI_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "EmpInc",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.EI_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogStartOfImportToStaging",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportEmployerIncentivesToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportEmployerIncentivesToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportEmployerIncentivesToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachSourceTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportEmployerIncentivesToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@activity('GetRunId').output.firstRow.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CompleteLogging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogSuccessfulExecution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/datasets/SrcEmpIncentive')]",
				"[concat(variables('factoryId'), '/dataflows/DataFlowIncentives')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportRAAToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportRAAUsers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"additionalColumns": [
									{
										"name": "RunId",
										"value": {
											"value": "@variables('RunId')",
											"type": "Expression"
										}
									}
								],
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_Users\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAUsersToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$binary']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$type']"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['idamUserId']"
										},
										"sink": {
											"name": "IdamUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userType']"
										},
										"sink": {
											"name": "UserType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdDate']['$date']"
										},
										"sink": {
											"name": "UserCreatedTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastSignedInDate']['$date']"
										},
										"sink": {
											"name": "LastSignedInTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['ukprn']"
										},
										"sink": {
											"name": "Ukprn",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "users"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_Users",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ImportRAAUsersStgToLive",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogSuccessfulExecution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ImportRAAUsersStgToLive]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRAAUserImportErrorDetails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAUsers",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAUsers').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAUsersToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAUsersToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							}
						}
					},
					{
						"name": "ImportRAAVacancies",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAUsers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_Vacancies\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAVacanciesToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$binary']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$type']"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['vacancyReference']"
										},
										"sink": {
											"name": "VacancyReference",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "VacancyStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ownerType']"
										},
										"sink": {
											"name": "OwnerType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['sourceOrigin']"
										},
										"sink": {
											"name": "SourceOrigin",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['sourceType']"
										},
										"sink": {
											"name": "SourceType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['closedDate']['$date']"
										},
										"sink": {
											"name": "ClosedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdDate']['$date']"
										},
										"sink": {
											"name": "CreatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdByUser']['userId']"
										},
										"sink": {
											"name": "CreatedByUserID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['submittedDate']['$date']"
										},
										"sink": {
											"name": "SubmittedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['submittedByUser']['userId']"
										},
										"sink": {
											"name": "SubmittedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['approvedDate']['$date']"
										},
										"sink": {
											"name": "ApprovedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['liveDate']['$date']"
										},
										"sink": {
											"name": "LiveDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']['$date']"
										},
										"sink": {
											"name": "LastUpdatedTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedByUser']['userId']"
										},
										"sink": {
											"name": "LastUpdatedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['isDeleted']"
										},
										"sink": {
											"name": "IsDeleted",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['applicationMethod']"
										},
										"sink": {
											"name": "ApplicationMethod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['applicationUrl']"
										},
										"sink": {
											"name": "ApplicationUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['closingDate']['$date']"
										},
										"sink": {
											"name": "ClosingDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['description']"
										},
										"sink": {
											"name": "VacancyDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerDescription']"
										},
										"sink": {
											"name": "EmployerDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerName']"
										},
										"sink": {
											"name": "EmployerName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerNameOption']"
										},
										"sink": {
											"name": "EmployerNameOption",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['legalEntityName']"
										},
										"sink": {
											"name": "LegalEntityName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['geoCodeMethod']"
										},
										"sink": {
											"name": "GeoCodeMethod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['legalEntityId']"
										},
										"sink": {
											"name": "LegalEntityId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['numberOfPositions']"
										},
										"sink": {
											"name": "NumberOfPositions",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['outcomeDescription']"
										},
										"sink": {
											"name": "OutcomeDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['programmeId']"
										},
										"sink": {
											"name": "ProgrammeId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['qualifications']"
										},
										"sink": {
											"name": "Qualifications",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['skills']"
										},
										"sink": {
											"name": "Skills",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['startDate']['$date']"
										},
										"sink": {
											"name": "StartDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['title']"
										},
										"sink": {
											"name": "VacancyTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['trainingDescription']"
										},
										"sink": {
											"name": "TrainingDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['trainingProvider']['ukprn']"
										},
										"sink": {
											"name": "TrainingProviderUkprn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['trainingProvider']['name']"
										},
										"sink": {
											"name": "TrainingProviderName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['duration']"
										},
										"sink": {
											"name": "WageDuration",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['durationUnit']"
										},
										"sink": {
											"name": "WageDurationUnit",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['workingWeekDescription']"
										},
										"sink": {
											"name": "WorkingWeekDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['weeklyHours']"
										},
										"sink": {
											"name": "WeeklyHours",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['wageType']"
										},
										"sink": {
											"name": "WageType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['fixedWageYearlyAmount']"
										},
										"sink": {
											"name": "FixedWageYearlyAmount",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['wage']['wageAdditionalInformation']"
										},
										"sink": {
											"name": "WageAdditionalInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['closureReason']"
										},
										"sink": {
											"name": "ClosureReason",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['applicationInstructions']"
										},
										"sink": {
											"name": "ApplicationIstructions",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerWebsiteUrl']"
										},
										"sink": {
											"name": "EmployerWebsiteUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['accountLegalEntityPublicHashedId']"
										},
										"sink": {
											"name": "AccountLegalEntityPublicHashedId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['thingsToConsider']"
										},
										"sink": {
											"name": "ThingsToConsider",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['deletedDate']['$date']"
										},
										"sink": {
											"name": "DeletedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['deletedByUser']['userId']"
										},
										"sink": {
											"name": "DeletedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employerAccountId']"
										},
										"sink": {
											"name": "EmployerAccountId",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "vacancies"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_Vacancies",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRAAv2VacancyImportErrorDetails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancies",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAVacancies').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAVacanciesToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportRAAapplicationReviews",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancies",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_ApplicationReviews\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAapplicationReviewToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$binary']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']['$type']"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['candidateId']['$binary']"
										},
										"sink": {
											"name": "CandidateId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['candidateId']['$type']"
										},
										"sink": {
											"name": "CandidateIdType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['vacancyReference']"
										},
										"sink": {
											"name": "VacancyReference",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "ApplicationStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdDate']['$date']"
										},
										"sink": {
											"name": "CreatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['submittedDate']['$date']"
										},
										"sink": {
											"name": "SubmittedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['candidateId']['$binary']"
										},
										"sink": {
											"name": "ApplicantId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['candidateId']['$type']"
										},
										"sink": {
											"name": "ApplicantType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['vacancyReference']"
										},
										"sink": {
											"name": "ApplicantVacancyReference",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['application']['applicationDate']['$date']"
										},
										"sink": {
											"name": "ApplicationDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['statusUpdatedDate']['$date']"
										},
										"sink": {
											"name": "StatusUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['statusUpdatedBy']['userId']"
										},
										"sink": {
											"name": "StatusUpdatedByUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['isWithdrawn']"
										},
										"sink": {
											"name": "IsWithDrawn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RunId']"
										},
										"sink": {
											"name": "RunId",
											"type": "Int64"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "applicationReviews"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ApplicationReviews",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRAAaplicationReviewImportErrorDetails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAapplicationReviews",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAapplicationReviews').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAApplicationReviewToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogSuccessfulExecutionOfVacancies",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAVacancies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAVacanciesToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Vacancies"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecutionOfApplicationReviews",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAapplicationReviews",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAapplicationReviewToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Vacancies"
								}
							}
						}
					},
					{
						"name": "ImportRAAReferenceDataCandidateSkills",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAapplicationReviews",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"CandidateSkills\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM Stg.RAA_ReferenceDataCandidateSkills\n\n  INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportRAAReferenceDataToDM'\n\t   ,getdate()\n\t   ,0",
									"type": "Expression"
								},
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "CandidateSkillsId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "CandidateSkillsLastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['skills']"
										},
										"sink": {
											"name": "Skills",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataCandidateSkills",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataApprenticeshipProgrammes",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataCandidateSkills",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"ApprenticeshipProgrammes\"}\n"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataApprenticeshipProgrammes\n",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['_id']"
										},
										"sink": {
											"name": "ProgrammeId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['apprenticeshipType']"
										},
										"sink": {
											"name": "ApprenticeshipType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['title']"
										},
										"sink": {
											"name": "Title",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['effectiveFrom']['$date']"
										},
										"sink": {
											"name": "EffectiveFrom",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['duration']"
										},
										"sink": {
											"name": "Duration",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['isActive']"
										},
										"sink": {
											"name": "IsActive",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['educationLevelNumber']"
										},
										"sink": {
											"name": "EducationLevelNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']['$date']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataApprenticeshipProgrammes",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataQualificationTypes",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataApprenticeshipProgrammes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"QualificationTypes\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataQualificationTypes",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['qualificationTypes']"
										},
										"sink": {
											"name": "QualificationTypes",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataQualificationTypes",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataProfanities",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataQualificationTypes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"Profanities\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataProfanities\n",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['profanities']"
										},
										"sink": {
											"name": "Profanities",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataProfanities",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "ImportRAAReferenceDataBannedPhrases",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataProfanities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"BannedPhrases\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataBannedPhrases",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['bannedPhrases']"
										},
										"sink": {
											"name": "BannedPhrases",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataBannedPhrases",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRDErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataCandidateSkills",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataCandidateSkills').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDAPErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataApprenticeshipProgrammes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataApprenticeshipProgrammes').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDQTErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataQualificationTypes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataQualificationTypes').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportRAAReferenceDataBankHolidays",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBannedPhrases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": "{\"_id\":\"BankHolidays\"}"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM Stg.RAA_ReferenceDataBankHolidays\n",
								"maxConcurrentConnections": {
									"value": "@pipeline().parameters.MaxConcurrentConnections",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.DIU",
								"type": "Expression"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']"
										},
										"sink": {
											"name": "BinaryId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['lastUpdatedDate']['$date']"
										},
										"sink": {
											"name": "LastUpdatedDateTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['england-and-wales']['events']"
										},
										"sink": {
											"name": "EnglandAndWalesEvents",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['scotland']['events']"
										},
										"sink": {
											"name": "ScotlandEvents",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['northern-ireland']['events']"
										},
										"sink": {
											"name": "NortherIrelandEvents",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SrcRAACosmos",
								"type": "DatasetReference",
								"parameters": {
									"CollectionName": "referenceData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "RAA_ReferenceDataBankHolidays",
									"SchemaName": "Stg"
								}
							}
						]
					},
					{
						"name": "LogRDProfanitiesErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataProfanities",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataProfanities').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDBannedPhrasesErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBannedPhrases",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataBannedPhrases').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogRDBankHolidaysErrorMessage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBankHolidays",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@{activity('ImportRAAReferenceDataBankHolidays').Error.message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TaskType": {
									"value": "ImportRAAReferenceDataToDM",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogSuccessfulExecutionOfReferenceData",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportRAAReferenceDataBankHolidays",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportRAAReferenceDataToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Vacancies"
								}
							}
						}
					}
				],
				"parameters": {
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					},
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					}
				},
				"variables": {
					"RunId": {
						"type": "String",
						"defaultValue": "\"1\""
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcRAACosmos')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportReservationToDM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Import Reservation to Datamart",
				"activities": [
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportReservationToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "For Each Reservation Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportReservationToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetResvTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name,PLTableName as PLTableName \nFROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='Reservation' and IsEnabled=1 and FullCopyToPL=1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Reservation Table",
						"description": "For Each Reservation Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetResvTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetResvTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LogStartOfResvImportToDatamart",
									"description": "Log Start of Import to Datamart",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportReservationToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetResvSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfResvImportToDatamart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcReservation",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetResvSourceColumnListToVariable",
									"description": "Get Commit Source Column List to Variable ",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetResvSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetResvSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogResvSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetResvSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "Reservation",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "GetImportResvSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVar_ResvKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='Reservation'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('RK1')}'),'K2','0x'+'@{variables('RK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2) as ConfigList\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='Reservation'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                   from STRING_SPLIT(@cols, ',') Cols \n\t     \t      where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColumnList",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "CopyResvData",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetImportResvSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowReservation",
											"type": "DataFlowReference",
											"parameters": {
												"SourceQuery": {
													"value": "'@{activity('GetImportResvSelectQuery').output.firstRow.SourceQuery}'",
													"type": "Expression"
												},
												"ColumnList": {
													"value": "'@{activity('GetImportResvSelectQuery').output.firstRow.ColumnList}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ReservationSource": {},
												"ReservationSink": {
													"TableName": "Resv_@{item().TABLE_NAME}",
													"SchemaName": "Stg"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "AzureIntegrationRunTime",
											"type": "IntegrationRuntimeReference"
										}
									}
								},
								{
									"name": "LogResvSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyResvData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportReservationToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogResvError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyResvData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyResvData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportReservationToDatamart",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ResvPresentationLayerFullRefresh",
									"description": "Presentation Layer Full Refresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogResvSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('RK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('RK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "AsData_PL.@{item().PLTABLENAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "Reservation",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.Resv_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Generate_ResvKeys_1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogResvSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "Generate_ResvKeys_2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Generate_ResvKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2\n\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVar_ResvKeys_1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Generate_ResvKeys_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RK1",
										"value": {
											"value": "@{activity('Generate_ResvKeys_1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVar_ResvKeys_2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVar_ResvKeys_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RK2",
										"value": {
											"value": "@{activity('Generate_ResvKeys_2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string"
					},
					"MaxConcurrentConnections": {
						"type": "int"
					},
					"DIU": {
						"type": "int"
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"RK1": {
						"type": "String"
					},
					"RK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/datasets/SrcReservation')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/dataflows/DataFlowReservation')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportUsersToDM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LogStartOfImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name,PLTableName as PLTableName FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='Users' and IsEnabled=1 and FullCopyToPL=1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceTableInUser",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetSourceColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LogStartOfImportToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SrcUsers",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "dbo"
											}
										}
									}
								},
								{
									"name": "GetImportSelectQuery",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetVariableUK2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\n\n\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\n\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='Users'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('UK1')}'),'K2','0x'+'@{variables('UK2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2) as ConfigList\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='Users'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                   from STRING_SPLIT(@cols, ',') Cols \n\t     \t      where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\n \n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColumnList",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GetSourceColumnListToVariable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetSourceColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceColumnList",
										"value": {
											"value": "@{activity('GetSourceColumnList').output.firstRow.Columns}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "DetectAndLogSourceDbChanges",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "GetSourceColumnListToVariable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DetectAndLogSourceDbChanges]",
										"storedProcedureParameters": {
											"Cols": {
												"value": {
													"value": "@{variables('SourceColumnList')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceDatabaseName": {
												"value": "Users",
												"type": "String"
											},
											"SourceSchemaName": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLogErrorDetails]",
										"storedProcedureParameters": {
											"ErrorMessage": {
												"value": {
													"value": "@{activity('CopyData').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TaskType": {
												"value": "ImportUsersToDM",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "CopyData",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "GetImportSelectQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowUser",
											"type": "DataFlowReference",
											"parameters": {
												"SourceQuery": {
													"value": "'@{activity('GetImportSelectQuery').output.firstRow.SourceQuery}'",
													"type": "Expression"
												},
												"ColumnList": {
													"value": "'@{activity('GetImportSelectQuery').output.firstRow.ColumnList}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"TableName": "Users",
													"SchemaName": "dbo"
												},
												"sink1": {
													"TableName": "EAUser_@{item().TABLE_NAME}",
													"SchemaName": "Stg"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "AzureIntegrationRunTime",
											"type": "IntegrationRuntimeReference"
										}
									}
								},
								{
									"name": "PresentationLayerFullRefresh",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LogSuccessfulExecutionToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PresentationLayerFullRefresh]",
										"storedProcedureParameters": {
											"ColumnList": {
												"value": null,
												"type": "String"
											},
											"ConfigSchema": {
												"value": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigTable": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K1": {
												"value": {
													"value": "@{variables('UK1')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"K2": {
												"value": {
													"value": "@{variables('UK2')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyBased": {
												"value": "1",
												"type": "Int32"
											},
											"PLTableName": {
												"value": {
													"value": "AsData_PL.@{item().PLTABLENAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@{variables('RunId')}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDatabaseName": {
												"value": "Users",
												"type": "String"
											},
											"StgTableName": {
												"value": {
													"value": "Stg.EAUser_@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "datamgmt_staging_dbconnectionstring",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LogStartOfImportToStaging",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportUsersToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "LogSuccessfulExecutionToStaging",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportUsersToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GenerateUK1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DetectAndLogSourceDbChanges",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K1 nvarchar(max)\n\nSELECT @SQLCode='SELECT @k1=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K1 nvarchar(max) OUTPUT',@K1=@K1 OUTPUT\n\nSELECT @K1 as K1\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "GenerateUK2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GenerateUK1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @K2 nvarchar(max)\n\nSELECT @SQLCode='SELECT @K2=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@K2 nvarchar(max) OUTPUT',@K2=@K2 OUTPUT\n\nSELECT @K2 as K2\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DestDataMart",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "Users",
												"SchemaName": "Stg"
											}
										}
									}
								},
								{
									"name": "SetVariableUK1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GenerateUK2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "UK1",
										"value": {
											"value": "@{activity('GenerateUK1').output.firstRow.K1}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetVariableUK2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetVariableUK1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "UK2",
										"value": {
											"value": "@{activity('GenerateUK2').output.firstRow.K2}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "LogStartOfImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportUsersToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogSuccessfulExecution",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachSourceTableInUser",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportUsersToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "SetRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.RunId",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					},
					"MaxConcurrentConnections": {
						"type": "int",
						"defaultValue": 4
					},
					"DIU": {
						"type": "int",
						"defaultValue": 4
					}
				},
				"variables": {
					"SourceColumnList": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"UK1": {
						"type": "String"
					},
					"UK2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/datasets/SrcUsers')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/dataflows/DataFlowUser')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master-ImportAccUsersComtFinResvToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportUsersToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportUsersToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportAccountsToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportUsersToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAccountsToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "CompleteLogging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "BuildModelledPL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ExecuteImportComtToDM",
						"description": "Execute Import Commitment data to DM ",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportAccountsToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportCommitmentToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportFinToDM",
						"description": "Execute Import Finance data to DM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportComtToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFinanceToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "ExecuteImportReservationToDM",
						"description": "Import Reservation to DM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportFinToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportReservationToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "BuildModelledPL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteImportRedundancyToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Build_Modelled_PL]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@{activity('GetRunId').output.firstRow.RunId}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportRedundancyToDM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportReservationToDM",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAppRedundancyToDM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@{activity('GetRunId').output.firstRow.RunId}",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/pipelines/ImportUsersToDM')]",
				"[concat(variables('factoryId'), '/pipelines/ImportAccountsToDM')]",
				"[concat(variables('factoryId'), '/pipelines/ImportCommitmentToDM')]",
				"[concat(variables('factoryId'), '/pipelines/ImportFinanceToDM')]",
				"[concat(variables('factoryId'), '/pipelines/ImportReservationToDM')]",
				"[concat(variables('factoryId'), '/pipelines/ImportAppRedundancyToDM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master-ImportCampaignDataToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportCampaignDataToDataMart_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LogStartOfCampaignImport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportCampaignDataToDataMart_1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LogStartOfCampaignImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{activity('GetRunId').output.firstRow.RunId}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportMarketoCampaignDataToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "LogCompleteCampaignImport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "UpdateImportStatusInConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/* Log the Import of Campaign Data as Complete */\n\nDECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportMarketoCampaignDataToDM'\n     AND RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{activity('GetRunId').output.firstRow.RunId}\n\n/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ExecuteImportMarketoBulkExtractTablesToPL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteImportCampaignDataToDataMart_2_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ImportMarketoBulkExtractTablesToPL]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@activity('GetRunId').output.firstRow.RunId",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetDateFilterValues",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ExecuteImportMarketoReferenceTablesToPL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "IF EXISTS (SELECT * FROM Mtd.MarketoFilterConfig WHERE ImportStatus=0)\n  BEGIN\n  SELECT MFC_ID,StartDateFilter,EndDateFilter,'History' as FilterType\n  FROM Mtd.MarketoFilterConfig\n  WHERE MFC_Id IN (\n  SELECT min(mfc_id)\n    FROM Mtd.MarketoFilterConfig\n   WHERE Isnull(ImportStatus,0)=0)\n   END\n   ELSE \n   BEGIN\n   select -1 as MFC_ID\n         ,convert(varchar,cast(getdate()-1 as date))+'T00:00:00Z' as StartDateFilter\n\t\t ,convert(varchar,cast(getdate() as date))+'T00:00:00Z' as EndDateFilter\n\t\t ,'Latest' as FilterType\n   END",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "GetProgramFilterValues",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetDateFilterValues",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "IF EXISTS (SELECT * FROM ASData_PL.MarketoPrograms WHERE ISNULL(LeadProgramImportStatus,0)=0)\n  BEGIN\n  SELECT max(ProgramId) as ProgramId\n    FROM ASData_PL.MarketoPrograms\n   WHERE ISNULL(LeadProgramImportStatus,0)=0\n   END\n   ELSE \n   BEGIN\n   UPDATE AsData_PL.MarketoPrograms\n         SET LeadProgramImportStatus=0\n\n  SELECT max(ProgramId) as ProgramId\n    FROM ASData_PL.MarketoPrograms\n   WHERE ISNULL(LeadProgramImportStatus,0)=0\n    END",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ExecuteImportMarketoReferenceTablesToPL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteImportCampaignDataToDataMart_1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ImportMarketoReferenceTablesToPL]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@activity('GetRunId').output.firstRow.RunId",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateImportStatusInConfig",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ExecuteImportMarketoBulkExtractTablesToPL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/* Update Config Status */\nIF ('@{activity('GetDateFilterValues').output.firstRow.FilterType}'='History')\nBEGIN\n\tUPDATE Mtd.MarketoFilterConfig\n\t   SET ImportStatus=1\n\t      ,ImportDate=GETDATE()\n\t WHERE MFC_Id=@{activity('GetDateFilterValues').output.firstRow.MFC_ID}\nEND \n\n/* Update Program Status */\n\nUPDATE ASData_PL.MarketoPrograms\n\t   SET LeadProgramImportStatus=1\n\t      ,LeadProgramImportDate=GETDATE()\n\t WHERE ProgramId=@{activity('GetProgramFilterValues').output.firstRow.ProgramId}\n\nSELECT 1\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "ExecuteImportCampaignDataToDataMart_2_History",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetProgramFilterValues",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportCampaignDataToDataMart_2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								},
								"FilterStartDate": {
									"value": "@activity('GetDateFilterValues').output.firstRow.StartDateFilter",
									"type": "Expression"
								},
								"FilterEndDate": {
									"value": "@activity('GetDateFilterValues').output.firstRow.EndDateFilter",
									"type": "Expression"
								},
								"ProgramId": {
									"value": "@activity('GetProgramFilterValues').output.firstRow.ProgramId",
									"type": "Expression"
								},
								"FilterParameter": "createdAt"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/pipelines/ImportCampaignDataToDataMart_1')]",
				"[concat(variables('factoryId'), '/pipelines/ImportCampaignDataToDataMart_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master-ImportVacanciesToDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRunId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(MAX(RunId) AS VARCHAR(256)) as RunId FROM Mgmt.Log_RunId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Stg",
									"SchemaName": "Users"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "GenerateRunId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[GenerateRunId]"
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportRAAToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportRAAToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"MaxConcurrentConnections": "4",
								"DIU": "4",
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteImportAvmsToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportRAAToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAvmsToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								},
								"MaxConcurrentConnections": "4",
								"DIU": "4"
							}
						}
					},
					{
						"name": "CompleteLogging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "BuildPresentationLayerForVacancies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/*  Log The Status as Finish in Execution Results */\nUPDATE MGMT\n     SET FullJobStatus='Finish'\n\tfrom Mgmt.Log_Execution_Results Mgmt\n   WHERE LogId=(SELECT MAX(LogId)\n                  FROM Mgmt.Log_Execution_Results\n\t\t\t\t WHERE RunId=@{activity('GetRunId').output.firstRow.RunId})\n/* Log the End Time on Run Id */\n  UPDATE MGMT\n      SET EndDateTime=getdate()\n\t FROM Mgmt.Log_RunId Mgmt\n\tWHERE RunId=@{activity('GetRunId').output.firstRow.RunId}\n\nSELECT 'na'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Users",
									"SchemaName": "Stg"
								}
							}
						}
					},
					{
						"name": "BuildPresentationLayerForVacancies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteImportFAACandidateToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[BuildVacanciesPresentationLayer]",
							"storedProcedureParameters": {
								"RunId": {
									"value": {
										"value": "@activity('GetRunId').output.firstRow.RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "datamgmt_staging_dbconnectionstring",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteImportAvmsCandidateToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportAvmsToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportAvmsCandidateToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteImportFAACandidateToDataMart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteImportAvmsCandidateToDataMart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ImportFAACandidateToDataMart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"RunId": {
									"value": "@activity('GetRunId').output.firstRow.RunId",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"RunId": {
						"type": "string",
						"defaultValue": "\"1\""
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]",
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]",
				"[concat(variables('factoryId'), '/pipelines/ImportRAAToDataMart')]",
				"[concat(variables('factoryId'), '/pipelines/ImportAvmsToDataMart')]",
				"[concat(variables('factoryId'), '/pipelines/ImportAvmsCandidateToDataMart')]",
				"[concat(variables('factoryId'), '/pipelines/ImportFAACandidateToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestDataMart')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datamgmt_staging_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Users"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "Stg"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SourseSK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BinaryId",
						"type": "varchar"
					},
					{
						"name": "TypeCode",
						"type": "varchar"
					},
					{
						"name": "IdamUserId",
						"type": "varchar"
					},
					{
						"name": "UserType",
						"type": "varchar"
					},
					{
						"name": "UserName",
						"type": "varchar"
					},
					{
						"name": "UserEmail",
						"type": "varchar"
					},
					{
						"name": "UserCreatedTimeStamp",
						"type": "varchar"
					},
					{
						"name": "LastSignedInTimeStamp",
						"type": "varchar"
					},
					{
						"name": "EmployerAccountId",
						"type": "varchar"
					},
					{
						"name": "Ukprn",
						"type": "varchar"
					},
					{
						"name": "RunId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "AsDm_CreatedDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "AsDm_UpdatedDate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datamgmt_staging_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcAccounts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eas_acc_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "EmployerAgreement"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "Employer_Account"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eas_acc_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcAppRedundancy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "appred_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "Employer"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/appred_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcAvmsPlus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "avmsplus_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Vacancy"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SrcTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/avmsplus_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcComts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Commitment database connection string",
				"linkedServiceName": {
					"referenceName": "comt_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Apprenticeship"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/comt_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcEmpIncentive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "empinc_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Accounts"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/empinc_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcFAACosmos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "faa_cdbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"CollectionName": {
						"type": "string",
						"defaultValue": "Candidate"
					}
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"schema": [],
				"typeProperties": {
					"collection": {
						"value": "@dataset().CollectionName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/faa_cdbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcFinance')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Finance database connection string",
				"linkedServiceName": {
					"referenceName": "eas_fin_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "AccountTransfers"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "employer_financial"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eas_fin_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcHttpMarketo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marketo_httpservice",
					"type": "LinkedServiceReference",
					"parameters": {
						"MarketoBaseUrl": {
							"value": "@dataset().MarketoBaseUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"RelativePath": {
						"type": "string",
						"defaultValue": "/bulk/v1/leads.json"
					},
					"MarketoBaseUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().RelativePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "{"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/marketo_httpservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcRAACosmos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rcrt_cdbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"CollectionName": {
						"type": "string",
						"defaultValue": "Users"
					}
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"schema": [],
				"typeProperties": {
					"collection": {
						"value": "@dataset().CollectionName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rcrt_cdbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcReservation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Reservation DB Connection String",
				"linkedServiceName": {
					"referenceName": "rsrv_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Reservation"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rsrv_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcRestMarketo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "marketo_restservice",
					"type": "LinkedServiceReference",
					"parameters": {
						"MarketoBaseUrl": {
							"value": "@dataset().MarketoBaseUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"RelativePath": {
						"type": "string",
						"defaultValue": "/rest/v1/leads.json"
					},
					"MarketoBaseUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().RelativePath",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/marketo_restservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcUsers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "users_dbconnectionstring",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Users"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/users_dbconnectionstring')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/appred_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('appred_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/avmsplus_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('avmsplus_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/comt_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('comt_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datamgmt_staging_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('datamgmt_staging_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eas_acc_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('eas_acc_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eas_fin_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('eas_fin_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empinc_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('empinc_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/faa_cdbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('faa_cdbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					},
					"database": "[parameters('faa_cdbconnectionstring_properties_typeProperties_database')]"
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/marketo_httpservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"MarketoBaseUrl": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('marketo_httpservice_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/marketo_restservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"MarketoBaseUrl": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('marketo_restservice_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rcrt_cdbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('rcrt_cdbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					},
					"database": "[parameters('rcrt_cdbconnectionstring_properties_typeProperties_database')]"
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rsrv_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('rsrv_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/users_dbconnectionstring')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('users_dbconnectionstring_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRunTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRunTime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-BuildDataMart')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Master-ImportVacanciesToDataMart",
							"type": "PipelineReference"
						},
						"parameters": {
							"RunId": "[parameters('Trigger-BuildDataMart_properties_Master-ImportVacanciesToDataMart_parameters_RunId')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-04-14T10:08:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Master-ImportVacanciesToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-GenerateKey')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Generate Key Trigger ",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "AppsCampaignGenerateKey",
							"type": "PipelineReference"
						},
						"parameters": {
							"RunId": "[parameters('Trigger-GenerateKey_properties_AppsCampaignGenerateKey_parameters_RunId')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-08-27T15:44:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								7
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/AppsCampaignGenerateKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-ImportAccUsersComFinResvToDM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Master-ImportAccUsersComtFinResvToDataMart",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-09-09T23:25:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Master-ImportAccUsersComtFinResvToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-ImportIncentives')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ImportIncentivesToDataMart",
							"type": "PipelineReference"
						},
						"parameters": {
							"RunId": "[parameters('Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_RunId')]",
							"MaxConcurrentConnections": "[parameters('Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_MaxConcurrentConnections')]",
							"DIU": "[parameters('Trigger-ImportIncentives_properties_ImportIncentivesToDataMart_parameters_DIU')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-08-25T15:24:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ImportIncentivesToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger-ImportMarketoToDataMart')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Master-ImportCampaignDataToDataMart",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-10-07T21:51:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Master-ImportCampaignDataToDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureIntegrationRunTime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowAccounts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SrcAccounts",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tSourceQuery as string,\n\tColumnList as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: ($SourceQuery),\n\tformat: 'query') ~> source1\nsource1 sink(input(\n\t\tSourseSK as integer,\n\t\tBinaryId as string,\n\t\tTypeCode as string,\n\t\tIdamUserId as string,\n\t\tUserType as string,\n\t\tUserName as string,\n\t\tUserEmail as string,\n\t\tUserCreatedTimeStamp as string,\n\t\tLastSignedInTimeStamp as string,\n\t\tEmployerAccountId as string,\n\t\tUkprn as string,\n\t\tRunId as long,\n\t\tAsDm_CreatedDate as timestamp,\n\t\tAsDm_UpdatedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcAccounts')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowAppRedundancy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SrcAppRedundancy",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tSourceQuery as string,\n\tColumnList as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: ($SourceQuery),\n\tformat: 'query') ~> source1\nsource1 sink(input(\n\t\tSourseSK as integer,\n\t\tBinaryId as string,\n\t\tTypeCode as string,\n\t\tIdamUserId as string,\n\t\tUserType as string,\n\t\tUserName as string,\n\t\tUserEmail as string,\n\t\tUserCreatedTimeStamp as string,\n\t\tLastSignedInTimeStamp as string,\n\t\tEmployerAccountId as string,\n\t\tUkprn as string,\n\t\tRunId as long,\n\t\tAsDm_CreatedDate as timestamp,\n\t\tAsDm_UpdatedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcAppRedundancy')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowCommitment')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Data flow commitment",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SrcComts",
								"type": "DatasetReference"
							},
							"name": "CommitSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference"
							},
							"name": "CommitSink"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tSourceQuery as string,\n\tColumnList as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: ($SourceQuery),\n\tformat: 'query') ~> CommitSource\nCommitSource sink(input(\n\t\tSourseSK as integer,\n\t\tBinaryId as string,\n\t\tTypeCode as string,\n\t\tIdamUserId as string,\n\t\tUserType as string,\n\t\tUserName as string,\n\t\tUserEmail as string,\n\t\tUserCreatedTimeStamp as string,\n\t\tLastSignedInTimeStamp as string,\n\t\tEmployerAccountId as string,\n\t\tUkprn as string,\n\t\tRunId as long,\n\t\tAsDm_CreatedDate as timestamp,\n\t\tAsDm_UpdatedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CommitSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcComts')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowFinance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow Finance",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SrcFinance",
								"type": "DatasetReference"
							},
							"name": "Financesource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference"
							},
							"name": "FinanceSink"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tSourceQuery as string,\n\tColumnList as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: ($SourceQuery),\n\tformat: 'query') ~> Financesource\nFinancesource sink(input(\n\t\tSourseSK as integer,\n\t\tBinaryId as string,\n\t\tTypeCode as string,\n\t\tIdamUserId as string,\n\t\tUserType as string,\n\t\tUserName as string,\n\t\tUserEmail as string,\n\t\tUserCreatedTimeStamp as string,\n\t\tLastSignedInTimeStamp as string,\n\t\tEmployerAccountId as string,\n\t\tUkprn as string,\n\t\tRunId as long,\n\t\tAsDm_CreatedDate as timestamp,\n\t\tAsDm_UpdatedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinanceSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcFinance')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowIncentives')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SrcEmpIncentive",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tSourceQuery as string,\n\tColumnList as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: ($SourceQuery),\n\tformat: 'query') ~> source1\nsource1 sink(input(\n\t\tSourseSK as integer,\n\t\tBinaryId as string,\n\t\tTypeCode as string,\n\t\tIdamUserId as string,\n\t\tUserType as string,\n\t\tUserName as string,\n\t\tUserEmail as string,\n\t\tUserCreatedTimeStamp as string,\n\t\tLastSignedInTimeStamp as string,\n\t\tEmployerAccountId as string,\n\t\tUkprn as string,\n\t\tRunId as long,\n\t\tAsDm_CreatedDate as timestamp,\n\t\tAsDm_UpdatedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcEmpIncentive')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowReservation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Reservation Dataflow",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SrcReservation",
								"type": "DatasetReference"
							},
							"name": "ReservationSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference"
							},
							"name": "ReservationSink"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tSourceQuery as string,\n\tColumnList as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: ($SourceQuery),\n\tformat: 'query') ~> ReservationSource\nReservationSource sink(input(\n\t\tSourseSK as integer,\n\t\tBinaryId as string,\n\t\tTypeCode as string,\n\t\tIdamUserId as string,\n\t\tUserType as string,\n\t\tUserName as string,\n\t\tUserEmail as string,\n\t\tUserCreatedTimeStamp as string,\n\t\tLastSignedInTimeStamp as string,\n\t\tEmployerAccountId as string,\n\t\tUkprn as string,\n\t\tRunId as long,\n\t\tAsDm_CreatedDate as timestamp,\n\t\tAsDm_UpdatedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ReservationSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcReservation')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowUser')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SrcUsers",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestDataMart",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tSourceQuery as string,\n\tColumnList as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: ($SourceQuery),\n\tformat: 'query') ~> source1\nsource1 sink(input(\n\t\tSourseSK as integer,\n\t\tBinaryId as string,\n\t\tTypeCode as string,\n\t\tIdamUserId as string,\n\t\tUserType as string,\n\t\tUserName as string,\n\t\tUserEmail as string,\n\t\tUserCreatedTimeStamp as string,\n\t\tLastSignedInTimeStamp as string,\n\t\tEmployerAccountId as string,\n\t\tUkprn as string,\n\t\tRunId as long,\n\t\tAsDm_CreatedDate as timestamp,\n\t\tAsDm_UpdatedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcUsers')]",
				"[concat(variables('factoryId'), '/datasets/DestDataMart')]"
			]
		}
	]
}