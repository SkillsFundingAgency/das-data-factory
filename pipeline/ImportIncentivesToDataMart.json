{
	"name": "ImportIncentivesToDataMart",
	"properties": {
		"activities": [
			{
				"name": "GetRAAv1TableList",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "LogStartOfImport",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='EmpInc' and IsEnabled=1",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DestDataMart",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "Users",
							"SchemaName": "Stg"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachSourceTable",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetRAAv1TableList",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetRAAv1TableList').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "GetSourceColumnList",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "SrcEmpIncentive",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "Accounts",
										"SchemaName": "dbo"
									}
								}
							}
						},
						{
							"name": "GetImportSelectQuery",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "DetectAndLogSourceDbChanges",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "Declare @cols varchar(max)\n\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\n\n\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='EmpInc'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}'\n\t) AS SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\t\t\t\t\t  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @Collist ColumnList\n\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DestDataMart",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "Users",
										"SchemaName": "Stg"
									}
								}
							}
						},
						{
							"name": "GetSourceColumnListToVariable",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetSourceColumnList",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "SourceColumnList",
								"value": {
									"value": "@{activity('GetSourceColumnList').output.firstRow.Columns}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "DetectAndLogSourceDbChanges",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "GetSourceColumnListToVariable",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[DetectAndLogSourceDbChanges]",
								"storedProcedureParameters": {
									"Cols": {
										"value": {
											"value": "@{variables('SourceColumnList')}",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceDatabaseName": {
										"value": "EmpInc",
										"type": "String"
									},
									"SourceSchemaName": {
										"value": {
											"value": "@{item().SCHEMA_NAME}",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceTableName": {
										"value": {
											"value": "@{item().TABLE_NAME}",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "datamgmt_staging_dbconnectionstring",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "LogError",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CopyData",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[InsertLogErrorDetails]",
								"storedProcedureParameters": {
									"ErrorMessage": {
										"value": {
											"value": "@{activity('CopyData').Error.message}",
											"type": "Expression"
										},
										"type": "String"
									},
									"RunId": {
										"value": {
											"value": "@{pipeline().parameters.RunId}",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"TaskType": {
										"value": "ImportAvmsToDM",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "datamgmt_staging_dbconnectionstring",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "CopyData",
							"type": "ExecuteDataFlow",
							"dependsOn": [
								{
									"activity": "GetImportSelectQuery",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.03:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "dataflow1",
									"type": "DataFlowReference",
									"parameters": {
										"SourceQuery": {
											"value": "'@{activity('GetImportSelectQuery').output.firstRow.SourceQuery}'",
											"type": "Expression"
										},
										"ColumnList": {
											"value": "'@{activity('GetImportSelectQuery').output.firstRow.ColumnList}'",
											"type": "Expression"
										},
										"PreCopyScript": {
											"value": "'DELETE FROM AsData_PL.EL_@{item().TABLE_NAME}'",
											"type": "Expression"
										}
									},
									"datasetParameters": {
										"source1": {
											"TableName": "Accounts",
											"SchemaName": "dbo"
										},
										"sink1": {
											"TableName": "EL_@{item().TABLE_NAME}",
											"SchemaName": "AsData_PL"
										}
									}
								},
								"integrationRuntime": {
									"referenceName": "AzureIntegrationRunTime",
									"type": "IntegrationRuntimeReference"
								}
							}
						}
					]
				}
			},
			{
				"name": "LogStartOfImport",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{pipeline().parameters.RunId}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportEmployerIncentivesToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DestDataMart",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "Users",
							"SchemaName": "Stg"
						}
					}
				}
			},
			{
				"name": "LogSuccessfulExecution",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "ForEachSourceTable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:30:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportAvmsToDM'\n     AND RunId=@{pipeline().parameters.RunId}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{pipeline().parameters.RunId}\n\nSELECT 1",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DestDataMart",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "Users",
							"SchemaName": "Stg"
						}
					}
				}
			}
		],
		"parameters": {
			"RunId": {
				"type": "string",
				"defaultValue": "\"1\""
			},
			"MaxConcurrentConnections": {
				"type": "int",
				"defaultValue": 4
			},
			"DIU": {
				"type": "int",
				"defaultValue": 4
			}
		},
		"variables": {
			"SourceColumnList": {
				"type": "String"
			}
		},
		"annotations": []
	}
}