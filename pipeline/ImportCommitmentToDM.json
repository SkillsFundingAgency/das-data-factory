{
	"name": "ImportCommitmentToDM",
	"properties": {
		"description": "Import Commitments to datamart",
		"activities": [
			{
				"name": "SetRunId",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "RunId",
					"value": {
						"value": "@activity('GetRunId').output.firstRow.RunId",
						"type": "Expression"
					}
				}
			},
			{
				"name": "LogStartOfImport",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SetRunId",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportEmpAccFinComtToDM'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DestDataMart",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "Users",
							"SchemaName": "Stg"
						}
					}
				}
			},
			{
				"name": "GetEmpAccTableList",
				"description": "Get Employer Account Table List",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "LogStartOfImport",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  SourceTableName as Table_Name, SourceSchemaName as Schema_Name FROM [Mtd].[SourceConfigForImport] Where SourceDatabaseName='Accounts' and IsEnabled=1",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DestDataMart",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "Users",
							"SchemaName": "Stg"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "For Each Account Source Table",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetEmpAccTableList",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetEmpAccTableList').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "LogStartOfAccontsImportToDatamart",
							"description": "Log Start of Import to Datamart",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "INSERT INTO Mgmt.Log_Execution_Results\n\t  (\n\t    RunId\n\t   ,StepNo\n\t   ,StoredProcedureName\n\t   ,ADFTaskType\n\t   ,StartDateTime\n\t   ,Execution_Status\n\t  )\n  SELECT \n        @{variables('RunId')}\n\t   ,'Step-5'\n\t   ,'NA'\n\t   ,'ImportEmployerAccountToDMStaging-'+'@{item().TABLE_NAME}'\n\t   ,getdate()\n\t   ,0\n\nSELECT 'N/A'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DestDataMart",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "Users",
										"SchemaName": "Stg"
									}
								}
							}
						},
						{
							"name": "GetAccountsSourceColumnList",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "LogStartOfAccontsImportToDatamart",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": "declare @cols varchar(max)\n\nSELECT  @cols = STUFF\n    (\n        ( \n            SELECT DISTINCT '], [' + column_name\n            FROM INFORMATION_SCHEMA.COLUMNS\n            where table_name='@{item().TABLE_NAME}'\n                 and table_schema='@{item().SCHEMA_NAME}'\n            FOR XML PATH('')\n        ), 1, 2, ''\n    ) + ']';\n\nSELECT @cols Columns",
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "SrcAccountsDB",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "GetAccountsSourceColumnListToVariable",
							"description": "Get Source Column List to Variable ",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetAccountsSourceColumnList",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "SourceColumnList",
								"value": {
									"value": "@{activity('GetAccountsSourceColumnList').output.firstRow.Columns}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "DetectAndLogAccountSourceDbChanges",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "GetAccountsSourceColumnListToVariable",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[DetectAndLogSourceDbChanges]",
								"storedProcedureParameters": {
									"Cols": {
										"value": {
											"value": "@{variables('SourceColumnList')}",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceDatabaseName": {
										"value": "Accounts",
										"type": "String"
									},
									"SourceSchemaName": {
										"value": {
											"value": "@{item().SCHEMA_NAME}",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceTableName": {
										"value": {
											"value": "@{item().TABLE_NAME}",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "datamgmt_staging_dbconnectionstring",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "GetImportAccountSelectQuery",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "SetVariableKey2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "Declare @cols varchar(max)\nDECLARE @SQLCode nvarchar(max)\n\n\nSELECT @SQLCode=SQLCode from stg.SQLCode WHERE TYPE='EBPP'\n\n\nSET @Cols= '@{variables('SourceColumnList')}'\n\nDeclare @SourceQuery Varchar(max)\n\nDeclare @collist VARCHAR(MAX)\n\nSET @collist=\n STUFF\n    (\n        ( \nSELECT ','+LTRIM(RTRIM(ConfigList))\nFROM\n(SELECT SourceConfigInDM.ConfigList\n   FROM (SELECT VALUE as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToInclude,',')\n  WHERE SourceDatabaseName='Accounts'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                      from STRING_SPLIT(@cols, ',') Cols \n\t\t\t\t     where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n  UNION\nSELECT replace(replace(replace(@SQLCode,'T1','CONVERT(NVARCHAR(512),'+ConfigList+')'),'K1','0x'+'@{variables('K1')}'),'K2','0x'+'@{variables('K2')}') + ' as ' + SUBSTRING(REPLACE(ConfigList,'[',''),1,2)+SUBSTRING(REVERSE(REPLACE(ConfigList,']','')),1,2) as ConfigList\n   from (SELECT value as ConfigList\n   FROM Mtd.SourceConfigForImport SCFI\n  CROSS APPLY string_split(ColumnNamesToMask,',')\n  WHERE SourceDatabaseName='Accounts'\n    AND SourceTableName='@{item().TABLE_NAME}'\n    AND SourceSchemaName='@{item().Schema_NAME}') SourceConfigInDM\n  WHERE  exists (select LTRIM(RTRIM(value)) as ExistingList\n                   from STRING_SPLIT(@cols, ',') Cols \n\t     \t      where LTRIM(RTRIM(SourceConfigInDM.ConfigList))=LTRIM(RTRIM(Cols.value)))\n\n\t) AS SourceConfigInDM\n  FOR XML PATH('')\n        ), 1, 1, ''\n    ) ;\n\n \n\nSET @SourceQuery='select ' + @collist + ' from [@{item().SCHEMA_NAME}].[@{item().TABLE_NAME}]'; \n\nSELECT @SourceQuery SourceQuery, @ColList as ColList",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DestDataMart",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "Users",
										"SchemaName": "Stg"
									}
								}
							}
						},
						{
							"name": "CopyAccountsData",
							"type": "ExecuteDataFlow",
							"dependsOn": [
								{
									"activity": "GetImportAccountSelectQuery",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.01:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "dataflow1",
									"type": "DataFlowReference",
									"parameters": {
										"SourceQuery": {
											"value": "'@{activity('GetImportAccountSelectQuery').output.firstRow.SourceQuery}'",
											"type": "Expression"
										},
										"ColumnList": {
											"value": "'@{activity('GetImportAccountSelectQuery').output.firstRow.ColumnList}'",
											"type": "Expression"
										}
									},
									"datasetParameters": {
										"source1": {
											"TableName": "Accounts",
											"SchemaName": "dbo"
										},
										"sink1": {
											"TableName": "Acct_@{item().TABLE_NAME}",
											"SchemaName": "Stg"
										}
									}
								},
								"integrationRuntime": {
									"referenceName": "AzureIntegrationRunTime",
									"type": "IntegrationRuntimeReference"
								}
							}
						},
						{
							"name": "LogAccountSuccessfulExecutionToStaging",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "CopyAccountsData",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportEmployerAccountsToDMStaging-'+'@{item().TABLE_NAME}'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DestDataMart",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "Users",
										"SchemaName": "Stg"
									}
								}
							}
						},
						{
							"name": "LogAccountDBError",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CopyAccountsData",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[InsertLogErrorDetails]",
								"storedProcedureParameters": {
									"ErrorMessage": {
										"value": {
											"value": "@{activity('CopyAccountsData').Error.message}",
											"type": "Expression"
										},
										"type": "String"
									},
									"RunId": {
										"value": {
											"value": "@{variables('RunId')}",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"TaskType": {
										"value": "ImportEmpAccountToDatamart",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "datamgmt_staging_dbconnectionstring",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "AccountPresentationLayerFullRefresh",
							"description": "Account Presentation Layer Full Refresh",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "LogAccountSuccessfulExecutionToStaging",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.01:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[PresentationLayerFullRefresh]",
								"storedProcedureParameters": {
									"ColumnList": {
										"value": null,
										"type": "String"
									},
									"ConfigSchema": {
										"value": "@{item().SCHEMA_NAME}",
										"type": "String"
									},
									"ConfigTable": {
										"value": "@{item().TABLE_NAME}",
										"type": "String"
									},
									"K1": {
										"value": {
											"value": "@{variables('K1')}",
											"type": "Expression"
										},
										"type": "String"
									},
									"K2": {
										"value": "@{variables('K2')}",
										"type": "String"
									},
									"KeyBased": {
										"value": {
											"value": "1",
											"type": "Expression"
										},
										"type": "Boolean"
									},
									"PLTableName": {
										"value": "AsData_PL.Acct_@{item().TABLE_NAME}",
										"type": "String"
									},
									"RunId": {
										"value": {
											"value": "@{variables('RunId')}",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"SourceDatabaseName": {
										"value": "Accounts",
										"type": "String"
									},
									"StgTableName": {
										"value": "Stg.Acct_@{item().TABLE_NAME}",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "datamgmt_staging_dbconnectionstring",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "GenerateKeys_1",
							"description": "Generate Keys 1",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "DetectAndLogAccountSourceDbChanges",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @key nvarchar(max)\n\nSELECT @SQLCode='SELECT @key=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@Key nvarchar(max) OUTPUT',@Key=@Key OUTPUT\n\nSELECT @Key as Key1\n",
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DestDataMart",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "Users",
										"SchemaName": "Stg"
									}
								}
							}
						},
						{
							"name": "GenerateKeys_2",
							"description": "Generate Keys 2",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "GenerateKeys_1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": "DECLARE @SQLCode Nvarchar(255)\ndeclare @key nvarchar(max)\n\nSELECT @SQLCode='SELECT @key=convert(nvarchar(max),'+SQLCode+',2)' From Stg.SQLCode Where [Type]='CRG'\n\nEXEC SP_EXECUTESQL @SQLCode, N'@Key nvarchar(max) OUTPUT',@Key=@Key OUTPUT\n\n\nSELECT @Key as Key2\n",
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DestDataMart",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "Users",
										"SchemaName": "Stg"
									}
								}
							}
						},
						{
							"name": "SetVariableKey1",
							"description": "Set Variable Key 1",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GenerateKeys_2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "K1",
								"value": "@{activity('GenerateKeys_1').output.firstRow.Key1}"
							}
						},
						{
							"name": "SetVariableKey2",
							"description": "",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "SetVariableKey1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "K2",
								"value": "@{activity('GenerateKeys_2').output.firstRow.Key2}"
							}
						}
					]
				}
			},
			{
				"name": "LogSuccessfulExecution",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "For Each Account Source Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:30:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "DECLARE @LogID int\n\n   SELECT @LogID=MAX(LogId) FROM Mgmt.Log_Execution_Results\n   WHERE ADFTaskType='ImportEmployerIncentivesToDM'\n     AND RunId=@{variables('RunId')}\n\nUPDATE Mgmt.Log_Execution_Results\n   SET Execution_Status=1\n      ,EndDateTime=getdate()\n\t  ,FullJobStatus='Pending'\n WHERE LogId=@LogID\n   AND RunID=@{variables('RunId')}\n\nSELECT 1",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DestDataMart",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "Users",
							"SchemaName": "Stg"
						}
					}
				}
			}
		],
		"annotations": []
	}
}